<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tender Management Software v3.2</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.2/dist/confetti.browser.min.js"></script>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
        }
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        ::-webkit-scrollbar-thumb {
            background: #a8a8a8;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #888;
        }
        .modal-backdrop {
            background-color: rgba(0,0,0,0.5);
            transition: opacity 0.3s ease;
            opacity: 0;
        }
        .modal-content {
            transition: transform 0.3s ease, opacity 0.3s ease;
            transform: translateY(-20px);
            opacity: 0;
        }
        .modal-backdrop.open { opacity: 1; }
        .modal-content.open { 
            transform: translateY(0);
            opacity: 1;
        }
        .tooltip {
            position: relative;
            display: inline-block;
        }
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 220px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 50;
            bottom: 125%;
            left: 50%;
            margin-left: -110px;
            opacity: 0;
            transition: opacity 0.3s;
        }
        .tooltip .tooltiptext::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: #333 transparent transparent transparent;
        }
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        .completed-tender {
            opacity: 0.7;
        }
        .completed-tender h3 {
            text-decoration: line-through;
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #09f;
            animation: spin 1s ease infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .urgent-pulse {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        .page {
            display: none;
        }
        .page.active {
            display: block;
        }
        .nav-item {
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .nav-item.active {
            background-color: #1e293b;
            border-left: 4px solid #3b82f6;
        }
        .notification-item {
            border-left: 4px solid #3b82f6;
            transition: all 0.3s ease;
        }
        .notification-item:hover {
            transform: translateX(4px);
        }
        .notification-item.urgent {
            border-left-color: #ef4444;
        }
        .notification-item.warning {
            border-left-color: #f59e0b;
        }
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }
        .analytics-card {
            transition: all 0.3s ease;
        }
        .analytics-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        .progress-bar {
            width: 100%;
            height: 8px;
            background-color: #e5e7eb;
            border-radius: 4px;
            overflow: hidden;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            border-radius: 4px;
            transition: width 0.3s ease;
        }
        .profile-logo {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid #3b82f6;
        }
        .eligibility-rule {
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 16px;
        }
        .role-tab {
            padding: 12px 16px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .role-tab.active {
            background-color: #3b82f6;
            color: white;
        }
        .eligibility-icon {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .eligibility-icon.eligible {
            background-color: #10b981;
            color: white;
        }
        .eligibility-icon.partially-eligible {
            background-color: #f59e0b;
            color: white;
        }
        .eligibility-icon.not-eligible {
            background-color: #ef4444;
            color: white;
        }
        .calendar-day {
            width: 14.28%;
            height: 80px;
            border: 1px solid #e5e7eb;
            padding: 4px;
            position: relative;
        }
        .calendar-day.today {
            background-color: #dbeafe;
            border-color: #3b82f6;
        }
        .calendar-day.has-tender {
            background-color: #fef3c7;
        }
        .calendar-day.urgent {
            background-color: #fee2e2;
        }
        .competitor-card {
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 16px;
            transition: all 0.3s ease;
        }
        .competitor-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        .advanced-analysis-card {
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            background: white;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .competitor-score {
            font-size: 2rem;
            font-weight: bold;
            text-align: center;
            margin: 10px 0;
        }
        .score-high { color: #10b981; }
        .score-medium { color: #f59e0b; }
        .score-low { color: #ef4444; }
        .strategy-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 600;
        }
        .strategy-aggressive { background-color: #fee2e2; color: #dc2626; }
        .strategy-conservative { background-color: #dbeafe; color: #1d4ed8; }
        .strategy-strategic { background-color: #fef3c7; color: #d97706; }
        .strategy-opportunistic { background-color: #e0e7ff; color: #7c3aed; }
    </style>
</head>
<body class="antialiased text-slate-800">
    
    <!-- Main App -->
    <div id="app" class="flex h-screen bg-slate-100 overflow-hidden">
        <!-- Sidebar -->
        <aside id="sidebar" class="w-64 bg-slate-800 text-white flex flex-col p-4 shadow-2xl fixed inset-y-0 left-0 z-40 transform -translate-x-full transition-transform duration-300 ease-in-out md:relative md:translate-x-0">
            <div class="flex items-center gap-3 mb-8">
                <div class="bg-blue-600 p-2 rounded-lg">
                    <i data-lucide="layers" class="w-6 h-6"></i>
                </div>
                <h1 class="text-xl font-bold">Tender V.3.2</h1>
            </div>
            
            <nav class="flex flex-col gap-2">
                <button id="addTenderBtn" class="bg-blue-600 text-white font-semibold w-full px-4 py-2.5 rounded-lg shadow-md hover:bg-blue-700 transition-colors flex items-center gap-3">
                    <i data-lucide="plus-circle" class="w-5 h-5"></i>
                    <span>Add New Tender</span>
                </button>
                
                <!-- Navigation Items -->
                <div class="nav-item active" data-page="dashboard">
                    <div class="flex items-center gap-3 px-4 py-2.5 rounded-lg">
                        <i data-lucide="layout-dashboard" class="w-5 h-5"></i>
                        <span>Dashboard</span>
                    </div>
                </div>
                <div class="nav-item" data-page="activeTenders">
                    <div class="flex items-center gap-3 px-4 py-2.5 rounded-lg">
                        <i data-lucide="briefcase" class="w-5 h-5 text-blue-400"></i>
                        <span>Active Tenders</span>
                    </div>
                </div>
                <!-- FIX: Eligible Tenders icon color changed to be visible -->
                <div class="nav-item" data-page="eligibleTenders">
                    <div class="flex items-center gap-3 px-4 py-2.5 rounded-lg">
                         <i data-lucide="check-circle" class="w-5 h-5 text-green-400"></i>
                        <span>Eligible Tenders</span>
                    </div>
                </div>
                <div class="nav-item" data-page="urgentDeadlines">
                    <div class="flex items-center gap-3 px-4 py-2.5 rounded-lg">
                        <i data-lucide="siren" class="w-5 h-5 text-red-400"></i>
                        <span>Urgent Deadlines</span>
                    </div>
                </div>
                
                <div class="nav-item" data-page="tenderCalendar">
                    <div class="flex items-center gap-3 px-4 py-2.5 rounded-lg">
                        <i data-lucide="calendar" class="w-5 h-5 text-yellow-400"></i>
                        <span>Tender Calendar</span>
                    </div>
                </div>
                <div class="nav-item" data-page="competitorAnalysis">
                    <div class="flex items-center gap-3 px-4 py-2.5 rounded-lg">
                        <i data-lucide="line-chart" class="w-5 h-5 text-purple-400"></i>
                        <span>Competitor Analysis</span>
                    </div>
                </div>
                
                <div class="nav-item" data-page="notes">
                    <div class="flex items-center gap-3 px-4 py-2.5 rounded-lg">
                        <i data-lucide="sticky-note" class="w-5 h-5 text-indigo-400"></i>
                        <span>Notes</span>
                    </div>
                </div>
                <div class="nav-item" data-page="analytics">
                    <div class="flex items-center gap-3 px-4 py-2.5 rounded-lg">
                        <i data-lucide="bar-chart-3" class="w-5 h-5 text-emerald-400"></i>
                        <span>Analytics</span>
                    </div>
                </div>
                <div class="nav-item" data-page="notifications">
                    <div class="flex items-center gap-3 px-4 py-2.5 rounded-lg">
                        <i data-lucide="bell" class="w-5 h-5 text-amber-400"></i>
                        <span>Notifications</span>
                        <span id="notificationBadge" class="bg-red-500 text-white text-xs rounded-full px-2 py-0.5 hidden">0</span>
                    </div>
                </div>
                
                <div class="border-t border-slate-700 pt-4 mt-2"></div>
                
                <button id="profileBtn" class="bg-slate-700/50 text-slate-200 font-semibold w-full px-4 py-2.5 rounded-lg hover:bg-slate-600/50 transition-colors flex items-center gap-3">
                    <img id="profileLogo" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgU6G1GzNDYLaQhFjVHksDgPUg7SmmtU_-ARYjfHKYT5dWANn3LKOqMIV1RkplrlwCBvR7xo2NJFxCzmyHeOv7u6fVYliYFwERPf3aPRotbHxwWy39fbHbhevrCmPNzQsSue7Z_eIZQfW4rwXZJ6tkOwhlXu_lVotVuFSSs34dPUhOz7S1L9Sf1kXEUuBc/s320/photo_2025-10-01_08-16-00.jpg" alt="Profile" class="profile-logo">
                    <span id="profileName">My Profile</span>
                </button>
                <button id="settingsBtn" class="bg-slate-700/50 text-slate-200 font-semibold w-full px-4 py-2.5 rounded-lg hover:bg-slate-600/50 transition-colors flex items-center gap-3">
                    <i data-lucide="settings" class="w-5 h-5 text-slate-300"></i>
                    <span>Settings</span>
                </button>
                <button id="backupDataBtn" class="bg-slate-700/50 text-slate-200 font-semibold w-full px-4 py-2.5 rounded-lg hover:bg-slate-600/50 transition-colors flex items-center gap-3">
                    <i data-lucide="database" class="w-5 h-5 text-cyan-400"></i>
                    <span>Backup Data</span>
                </button>
            </nav>

            <div class="mt-auto pt-4 border-t border-slate-700">
                <div id="gmailAuthContainer">
                    <button id="connectGmailBtn" class="bg-red-600 text-white font-semibold w-full px-4 py-2.5 rounded-lg shadow-md hover:bg-red-700 transition-colors flex items-center gap-3">
                        <i data-lucide="mail" class="w-5 h-5"></i>
                        <span>Connect Gmail</span>
                    </button>
                    <div id="gmailStatus" class="hidden items-center justify-between gap-2 bg-green-600/20 text-white p-3 rounded-lg">
                        <div class="flex items-center gap-2">
                            <i data-lucide="check-circle" class="w-5 h-5 text-green-400"></i>
                            <span class="font-semibold text-sm">Gmail Connected</span>
                        </div>
                        <button id="disconnectGmailBtn" class="text-red-400 hover:text-red-300 transition-colors" title="Disconnect">
                            <i data-lucide="x-circle" class="w-5 h-5"></i>
                        </button>
                    </div>
                </div>
            </div>
        </aside>

        <!-- Sidebar Overlay for mobile -->
        <div id="sidebar-overlay" class="fixed inset-0 bg-black/50 z-30 hidden md:hidden"></div>

        <!-- Main Content -->
        <div class="flex-1 flex flex-col overflow-hidden">
            <!-- Header -->
            <header class="bg-white/80 backdrop-blur-sm border-b border-slate-200 p-4 shadow-sm flex items-center justify-between md:justify-start">
                <button id="menuBtn" class="md:hidden p-2 -ml-2 rounded-md hover:bg-slate-200">
                    <i data-lucide="menu" class="w-6 h-6"></i>
                </button>
                <div class="md:ml-0 ml-4">
                    <h1 id="pageTitle" class="text-2xl font-bold text-slate-800">Dashboard V.3.2</h1>
                    <p id="pageSubtitle" class="text-slate-500 text-sm">Track, manage, and check eligibility for all your tenders.</p>
                </div>
                <div id="reminderStatus" class="hidden md:flex items-center gap-2 bg-yellow-100 text-yellow-800 px-3 py-2 rounded-lg">
                    <i data-lucide="bell" class="w-4 h-4"></i>
                    <span class="text-sm font-medium" id="pendingRemindersCount">0</span>
                    <span class="text-sm">reminders pending</span>
                </div>
            </header>

            <!-- Dashboard Page -->
            <main id="dashboard" class="page active flex-1 overflow-y-auto p-6">
                <!-- Stats Section -->
                <div id="stats" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                    <!-- Stats cards will be inserted here by JavaScript -->
                </div>

                <!-- Urgent Deadline Alert Banner -->
                <div id="urgentDeadlineAlert" class="hidden bg-red-50 border border-red-200 rounded-xl p-4 mb-6">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-3">
                            <div class="bg-red-100 p-2 rounded-full">
                                <i data-lucide="siren" class="w-5 h-5 text-red-600"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold text-red-800">Urgent Deadline Alert!</h3>
                                <p class="text-red-600 text-sm" id="urgentAlertText"></p>
                            </div>
                        </div>
                        <button id="dismissAlertBtn" class="text-red-400 hover:text-red-600">
                            <i data-lucide="x" class="w-5 h-5"></i>
                        </button>
                    </div>
                </div>

                <!-- Filters -->
                <div class="bg-white p-4 rounded-xl shadow-md mb-6 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 items-end border border-slate-200">
                    <div>
                        <label for="filterStatus" class="block text-sm font-medium text-gray-700">Tender Status</label>
                        <select id="filterStatus" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <option value="active">Active</option>
                            <option value="completed">Completed</option>
                            <option value="expired">Expired</option>
                            <option value="all">All Tenders</option>
                        </select>
                    </div>
                    <div>
                        <label for="filterDept" class="block text-sm font-medium text-gray-700">Department</label>
                        <input type="text" id="filterDept" placeholder="Search department..." class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    <div>
                        <label for="filterType" class="block text-sm font-medium text-gray-700">Tender Type</label>
                        <select id="filterType" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <option value="all">All Types</option>
                            <option>Goods</option>
                            <option>Services</option>
                            <option>Works</option>
                        </select>
                    </div>
                    <button id="clearFiltersBtn" class="bg-red-500 text-white font-semibold px-4 py-2 rounded-lg hover:bg-red-600 transition-colors flex items-center justify-center gap-2">
                        <i data-lucide="x" class="w-5 h-5"></i>
                        Clear Filters
                    </button>
                </div>

                <!-- Tender List -->
                <div id="tenderList" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                    <!-- Tenders will be dynamically inserted here -->
                </div>
                <div id="noTenders" class="hidden text-center py-16">
                    <i data-lucide="folder-search" class="w-20 h-20 mx-auto text-gray-300"></i>
                    <p class="text-gray-500 mt-4 text-xl font-medium">No tenders found.</p>
                    <p class="text-gray-400">Try adjusting your search filters or add a new tender.</p>
                </div>
            </main>

            <!-- Active Tenders Page -->
            <main id="activeTenders" class="page flex-1 overflow-y-auto p-6">
                <div class="bg-white p-6 rounded-xl shadow-md mb-6 border border-slate-200">
                    <div class="flex items-center gap-3 mb-4">
                        <div class="bg-blue-100 p-2 rounded-full">
                            <i data-lucide="briefcase" class="w-6 h-6 text-blue-600"></i>
                        </div>
                        <h2 class="text-xl font-bold text-slate-800">Active Tenders</h2>
                    </div>
                    <p class="text-slate-600 mb-6">All currently active tenders that are not expired or completed.</p>
                    
                    <div id="activeTendersList" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                        <!-- Active tenders will be inserted here -->
                    </div>
                    <div id="noActiveTenders" class="hidden text-center py-16">
                        <i data-lucide="briefcase" class="w-20 h-20 mx-auto text-gray-300"></i>
                        <p class="text-gray-500 mt-4 text-xl font-medium">No active tenders found.</p>
                        <p class="text-gray-400">All your tenders might be completed or expired.</p>
                    </div>
                </div>
            </main>

            <!-- Eligible Tenders Page -->
            <main id="eligibleTenders" class="page flex-1 overflow-y-auto p-6">
                <div class="bg-white p-6 rounded-xl shadow-md mb-6 border border-slate-200">
                    <div class="flex items-center gap-3 mb-4">
                        <div class="bg-green-100 p-2 rounded-full">
                            <i data-lucide="check-badge" class="w-6 h-6 text-green-600"></i>
                        </div>
                        <h2 class="text-xl font-bold text-slate-800">Eligible Tenders</h2>
                    </div>
                    <p class="text-slate-600 mb-6">Tenders that match your eligibility criteria based on your profile.</p>
                    
                    <div id="eligibleTendersList" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                        <!-- Eligible tenders will be inserted here -->
                    </div>
                    <div id="noEligibleTenders" class="hidden text-center py-16">
                        <i data-lucide="check-badge" class="w-20 h-20 mx-auto text-gray-300"></i>
                        <p class="text-gray-500 mt-4 text-xl font-medium">No eligible tenders found.</p>
                        <p class="text-gray-400">Update your profile or check back later for new tenders.</p>
                    </div>
                </div>
            </main>

            <!-- Urgent Deadlines Page -->
            <main id="urgentDeadlines" class="page flex-1 overflow-y-auto p-6">
                <div class="bg-white p-6 rounded-xl shadow-md mb-6 border border-slate-200">
                    <div class="flex items-center gap-3 mb-4">
                        <div class="bg-red-100 p-2 rounded-full">
                            <i data-lucide="siren" class="w-6 h-6 text-red-600"></i>
                        </div>
                        <h2 class="text-xl font-bold text-slate-800">Urgent Deadlines</h2>
                    </div>
                    <p class="text-slate-600 mb-6">Tenders with deadlines approaching within the next 2 days.</p>
                    
                    <div id="urgentTendersList" class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                        <!-- Urgent tenders will be inserted here -->
                    </div>
                    <div id="noUrgentTenders" class="hidden text-center py-16">
                        <i data-lucide="siren" class="w-20 h-20 mx-auto text-gray-300"></i>
                        <p class="text-gray-500 mt-4 text-xl font-medium">No urgent deadlines.</p>
                        <p class="text-gray-400">Great! You have no tenders with urgent deadlines.</p>
                    </div>
                </div>
            </main>

            <!-- Tender Calendar Page -->
            <main id="tenderCalendar" class="page flex-1 overflow-y-auto p-6">
                <div class="bg-white p-6 rounded-xl shadow-md mb-6 border border-slate-200">
                    <div class="flex items-center gap-3 mb-4">
                        <div class="bg-yellow-100 p-2 rounded-full">
                            <i data-lucide="calendar" class="w-6 h-6 text-yellow-600"></i>
                        </div>
                        <h2 class="text-xl font-bold text-slate-800">Tender Calendar</h2>
                    </div>
                    <p class="text-slate-600 mb-6">Visual calendar view of all tender deadlines and important dates.</p>
                    
                    <div class="mb-6 flex justify-between items-center">
                        <div>
                            <h3 class="text-lg font-semibold text-slate-800" id="calendarMonth">October 2024</h3>
                        </div>
                        <div class="flex gap-2">
                            <button id="prevMonth" class="bg-slate-200 text-slate-700 px-3 py-2 rounded-lg hover:bg-slate-300 transition-colors">
                                <i data-lucide="chevron-left" class="w-5 h-5"></i>
                            </button>
                            <button id="todayBtn" class="bg-blue-600 text-white px-3 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                                Today
                            </button>
                            <button id="nextMonth" class="bg-slate-200 text-slate-700 px-3 py-2 rounded-lg hover:bg-slate-300 transition-colors">
                                <i data-lucide="chevron-right" class="w-5 h-5"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Calendar Header -->
                    <div class="grid grid-cols-7 gap-1 mb-2">
                        <div class="text-center font-semibold text-slate-700 py-2">Sun</div>
                        <div class="text-center font-semibold text-slate-700 py-2">Mon</div>
                        <div class="text-center font-semibold text-slate-700 py-2">Tue</div>
                        <div class="text-center font-semibold text-slate-700 py-2">Wed</div>
                        <div class="text-center font-semibold text-slate-700 py-2">Thu</div>
                        <div class="text-center font-semibold text-slate-700 py-2">Fri</div>
                        <div class="text-center font-semibold text-slate-700 py-2">Sat</div>
                    </div>
                    
                    <!-- Calendar Grid -->
                    <div id="calendarGrid" class="grid grid-cols-7 gap-1">
                        <!-- Calendar days will be populated here -->
                    </div>
                    
                    <!-- Legend -->
                    <div class="mt-6 flex flex-wrap gap-4">
                        <div class="flex items-center gap-2">
                            <div class="w-4 h-4 bg-blue-100 border border-blue-300 rounded"></div>
                            <span class="text-sm text-slate-600">Today</span>
                        </div>
                        <div class="flex items-center gap-2">
                            <div class="w-4 h-4 bg-yellow-100 border border-yellow-300 rounded"></div>
                            <span class="text-sm text-slate-600">Has Tenders</span>
                        </div>
                        <div class="flex items-center gap-2">
                            <div class="w-4 h-4 bg-red-100 border border-red-300 rounded"></div>
                            <span class="text-sm text-slate-600">Urgent</span>
                        </div>
                    </div>
                </div>
            </main>

            <!-- ENHANCED: Competitor Analysis Page -->
            <main id="competitorAnalysis" class="page flex-1 overflow-y-auto p-6">
                <div class="bg-white p-6 rounded-xl shadow-md mb-6 border border-slate-200">
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-center gap-3">
                            <div class="bg-red-100 p-2 rounded-full">
                                <i data-lucide="users" class="w-6 h-6 text-red-600"></i>
                            </div>
                            <h2 class="text-xl font-bold text-slate-800">Competitor Analysis</h2>
                        </div>
                        <button id="addCompetitorBtn" class="bg-red-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-red-700 transition-colors flex items-center gap-2">
                            <i data-lucide="plus" class="w-5 h-5"></i>
                            Add Competitor
                        </button>
                    </div>
                    <p class="text-slate-600 mb-6">Track and analyze competitor bidding patterns and performance with advanced analytics.</p>
                    
                    <!-- Advanced Competitor Stats -->
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                        <div class="bg-white p-4 rounded-xl shadow-md border border-slate-200">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-slate-500 text-sm font-medium">Total Competitors</p>
                                    <p class="text-2xl font-bold" id="totalCompetitors">0</p>
                                </div>
                                <i data-lucide="users" class="w-8 h-8 text-red-500"></i>
                            </div>
                        </div>
                        <div class="bg-white p-4 rounded-xl shadow-md border border-slate-200">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-slate-500 text-sm font-medium">Active Competitions</p>
                                    <p class="text-2xl font-bold" id="activeCompetitions">0</p>
                                </div>
                                <i data-lucide="target" class="w-8 h-8 text-blue-500"></i>
                            </div>
                        </div>
                        <div class="bg-white p-4 rounded-xl shadow-md border border-slate-200">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-slate-500 text-sm font-medium">Win Rate</p>
                                    <p class="text-2xl font-bold" id="competitorWinRate">0%</p>
                                </div>
                                <i data-lucide="trending-up" class="w-8 h-8 text-green-500"></i>
                            </div>
                        </div>
                        <div class="bg-white p-4 rounded-xl shadow-md border border-slate-200">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-slate-500 text-sm font-medium">Avg. Bid Difference</p>
                                    <p class="text-2xl font-bold" id="avgBidDifference">0%</p>
                                </div>
                                <i data-lucide="dollar-sign" class="w-8 h-8 text-purple-500"></i>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Advanced Competitor Analysis Cards -->
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
                        <!-- Competitor Strategy Analysis -->
                        <div class="advanced-analysis-card">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold text-slate-800">Competitor Strategy Analysis</h3>
                                <i data-lucide="bar-chart-3" class="w-6 h-6 text-blue-500"></i>
                            </div>
                            <div class="space-y-4">
                                <div>
                                    <div class="flex justify-between mb-1">
                                        <span class="text-sm font-medium">Aggressive Bidders</span>
                                        <span class="text-sm font-medium" id="aggressiveCount">0</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2">
                                        <div id="aggressiveBar" class="bg-red-600 h-2 rounded-full" style="width: 0%"></div>
                                    </div>
                                </div>
                                <div>
                                    <div class="flex justify-between mb-1">
                                        <span class="text-sm font-medium">Conservative Bidders</span>
                                        <span class="text-sm font-medium" id="conservativeCount">0</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2">
                                        <div id="conservativeBar" class="bg-blue-600 h-2 rounded-full" style="width: 0%"></div>
                                    </div>
                                </div>
                                <div>
                                    <div class="flex justify-between mb-1">
                                        <span class="text-sm font-medium">Strategic Bidders</span>
                                        <span class="text-sm font-medium" id="strategicCount">0</span>
                                    </div>
                                    <div class="w-full bg-gray-200 rounded-full h-2">
                                        <div id="strategicBar" class="bg-yellow-500 h-2 rounded-full" style="width: 0%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Market Position Analysis -->
                        <div class="advanced-analysis-card">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold text-slate-800">Market Position Analysis</h3>
                                <i data-lucide="trending-up" class="w-6 h-6 text-green-500"></i>
                            </div>
                            <div class="text-center">
                                <div class="inline-flex items-center justify-center w-24 h-24 rounded-full bg-blue-50 border-4 border-blue-200 mb-4">
                                    <span class="text-2xl font-bold text-blue-600" id="marketPositionScore">0%</span>
                                </div>
                                <p class="text-sm text-slate-600">Your competitive position score</p>
                            </div>
                            <div class="mt-4 grid grid-cols-2 gap-2">
                                <div class="text-center p-2 bg-green-50 rounded-lg">
                                    <p class="text-sm font-medium text-green-800">Strengths</p>
                                    <p class="text-lg font-bold" id="strengthCount">0</p>
                                </div>
                                <div class="text-center p-2 bg-red-50 rounded-lg">
                                    <p class="text-sm font-medium text-red-800">Weaknesses</p>
                                    <p class="text-lg font-bold" id="weaknessCount">0</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Competitor Comparison Chart -->
                    <div class="advanced-analysis-card mb-8">
                        <div class="flex items-center justify-between mb-4">
                            <h3 class="text-lg font-semibold text-slate-800">Competitor Comparison</h3>
                            <i data-lucide="bar-chart" class="w-6 h-6 text-purple-500"></i>
                        </div>
                        <div class="chart-container">
                            <canvas id="competitorComparisonChart"></canvas>
                        </div>
                    </div>
                    
                    <!-- Competitors List -->
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-slate-800">Competitor Profiles</h3>
                        <div class="flex gap-2">
                            <select id="competitorFilter" class="border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500 text-sm">
                                <option value="all">All Types</option>
                                <option value="Direct">Direct</option>
                                <option value="Indirect">Indirect</option>
                                <option value="Potential">Potential</option>
                            </select>
                            <input type="text" id="competitorSearch" placeholder="Search competitors..." class="border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500 text-sm">
                        </div>
                    </div>
                    
                    <div id="competitorsList" class="space-y-4">
                        <!-- Competitors will be inserted here -->
                    </div>
                    <div id="noCompetitors" class="hidden text-center py-16">
                        <i data-lucide="users" class="w-20 h-20 mx-auto text-gray-300"></i>
                        <p class="text-gray-500 mt-4 text-xl font-medium">No competitors added yet.</p>
                        <p class="text-gray-400">Add competitors to track their bidding patterns.</p>
                    </div>
                </div>
            </main>

            <!-- Notes Page -->
            <main id="notes" class="page flex-1 overflow-y-auto p-6">
                <div class="bg-white p-6 rounded-xl shadow-md mb-6 border border-slate-200">
                    <div class="flex items-center gap-3 mb-4">
                        <div class="bg-purple-100 p-2 rounded-full">
                            <i data-lucide="sticky-note" class="w-6 h-6 text-purple-600"></i>
                        </div>
                        <h2 class="text-xl font-bold text-slate-800">Tender Notes</h2>
                    </div>
                    <p class="text-slate-600 mb-6">All tender notes organized by tender name.</p>
                    
                    <div id="notesList" class="space-y-6">
                        <!-- Notes will be inserted here -->
                    </div>
                    <div id="noNotes" class="hidden text-center py-16">
                        <i data-lucide="sticky-note" class="w-20 h-20 mx-auto text-gray-300"></i>
                        <p class="text-gray-500 mt-4 text-xl font-medium">No tender notes found.</p>
                        <p class="text-gray-400">Add notes to your tenders to see them here.</p>
                    </div>
                </div>
            </main>

            <!-- Analytics Page -->
            <main id="analytics" class="page flex-1 overflow-y-auto p-6">
                <div class="bg-white p-6 rounded-xl shadow-md mb-6 border border-slate-200">
                    <div class="flex items-center gap-3 mb-6">
                        <div class="bg-purple-100 p-2 rounded-full">
                            <i data-lucide="bar-chart-3" class="w-6 h-6 text-purple-600"></i>
                        </div>
                        <h2 class="text-xl font-bold text-slate-800">Tender Analytics</h2>
                    </div>
                    <p class="text-slate-600 mb-6">Comprehensive analytics and insights about your tender performance.</p>
                    
                    <!-- Analytics Overview Cards -->
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                        <div class="analytics-card bg-gradient-to-r from-blue-500 to-blue-600 text-white p-6 rounded-xl shadow-md">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-blue-100 text-sm font-medium">Total Tenders</p>
                                    <p class="text-2xl font-bold mt-1" id="totalTendersCount">0</p>
                                </div>
                                <i data-lucide="briefcase" class="w-8 h-8 text-blue-200"></i>
                            </div>
                        </div>
                        <div class="analytics-card bg-gradient-to-r from-green-500 to-green-600 text-white p-6 rounded-xl shadow-md">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-green-100 text-sm font-medium">Success Rate</p>
                                    <p class="text-2xl font-bold mt-1" id="successRate">0%</p>
                                </div>
                                <i data-lucide="trending-up" class="w-8 h-8 text-green-200"></i>
                            </div>
                        </div>
                        <div class="analytics-card bg-gradient-to-r from-purple-500 to-purple-600 text-white p-6 rounded-xl shadow-md">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-purple-100 text-sm font-medium">Avg. Eligibility</p>
                                    <p class="text-2xl font-bold mt-1" id="avgEligibility">0%</p>
                                </div>
                                <i data-lucide="check-circle" class="w-8 h-8 text-purple-200"></i>
                            </div>
                        </div>
                        <div class="analytics-card bg-gradient-to-r from-orange-500 to-orange-600 text-white p-6 rounded-xl shadow-md">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-orange-100 text-sm font-medium">Active Departments</p>
                                    <p class="text-2xl font-bold mt-1" id="activeDepartments">0</p>
                                </div>
                                <i data-lucide="building" class="w-8 h-8 text-orange-200"></i>
                            </div>
                        </div>
                    </div>

                    <!-- Advanced Analytics Cards -->
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                        <div class="analytics-card bg-white p-6 rounded-xl shadow-md border border-slate-200">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold text-slate-800">Eligibility Score</h3>
                                <i data-lucide="target" class="w-6 h-6 text-blue-500"></i>
                            </div>
                            <div class="text-center">
                                <div class="inline-flex items-center justify-center w-24 h-24 rounded-full bg-blue-50 border-4 border-blue-200 mb-4">
                                    <span class="text-2xl font-bold text-blue-600" id="eligibilityScore">0%</span>
                                </div>
                                <p class="text-sm text-slate-600">Overall eligibility score across all tenders</p>
                            </div>
                        </div>
                        
                        <div class="analytics-card bg-white p-6 rounded-xl shadow-md border border-slate-200">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold text-slate-800">Submission Rate</h3>
                                <i data-lucide="upload" class="w-6 h-6 text-green-500"></i>
                            </div>
                            <div class="text-center">
                                <div class="inline-flex items-center justify-center w-24 h-24 rounded-full bg-green-50 border-4 border-green-200 mb-4">
                                    <span class="text-2xl font-bold text-green-600" id="submissionRate">0%</span>
                                </div>
                                <p class="text-sm text-slate-600">Tenders submitted vs. eligible</p>
                            </div>
                        </div>
                        
                        <div class="analytics-card bg-white p-6 rounded-xl shadow-md border border-slate-200">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold text-slate-800">Win Probability</h3>
                                <i data-lucide="award" class="w-6 h-6 text-purple-500"></i>
                            </div>
                            <div class="text-center">
                                <div class="inline-flex items-center justify-center w-24 h-24 rounded-full bg-purple-50 border-4 border-purple-200 mb-4">
                                    <span class="text-2xl font-bold text-purple-600" id="winProbability">0%</span>
                                </div>
                                <p class="text-sm text-slate-600">Estimated probability of winning tenders</p>
                            </div>
                        </div>
                    </div>

                    <!-- Charts Section -->
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
                        <!-- Tender Status Distribution -->
                        <div class="bg-white p-6 rounded-xl shadow-md border border-slate-200">
                            <h3 class="text-lg font-semibold text-slate-800 mb-4">Tender Status Distribution</h3>
                            <div class="chart-container">
                                <canvas id="statusChart"></canvas>
                            </div>
                        </div>

                        <!-- Department-wise Tenders -->
                        <div class="bg-white p-6 rounded-xl shadow-md border border-slate-200">
                            <h3 class="text-lg font-semibold text-slate-800 mb-4">Department-wise Tenders</h3>
                            <div class="chart-container">
                                <canvas id="departmentChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Monthly Trends and Eligibility Analysis -->
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <!-- Monthly Trends -->
                        <div class="bg-white p-6 rounded-xl shadow-md border border-slate-200">
                            <h3 class="text-lg font-semibold text-slate-800 mb-4">Monthly Tender Trends</h3>
                            <div class="chart-container">
                                <canvas id="monthlyTrendsChart"></canvas>
                            </div>
                        </div>

                        <!-- Eligibility Analysis -->
                        <div class="bg-white p-6 rounded-xl shadow-md border border-slate-200">
                            <h3 class="text-lg font-semibold text-slate-800 mb-4">Eligibility Analysis</h3>
                            <div class="chart-container">
                                <canvas id="eligibilityChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Detailed Analytics Table -->
                    <div class="mt-8 bg-white p-6 rounded-xl shadow-md border border-slate-200">
                        <h3 class="text-lg font-semibold text-slate-800 mb-4">Detailed Tender Analytics</h3>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm text-left text-slate-600">
                                <thead class="text-xs text-slate-700 uppercase bg-slate-50">
                                    <tr>
                                        <th class="px-4 py-3">Department</th>
                                        <th class="px-4 py-3">Total Tenders</th>
                                        <th class="px-4 py-3">Active</th>
                                        <th class="px-4 py-3">Completed</th>
                                        <th class="px-4 py-3">Eligible</th>
                                        <th class="px-4 py-3">Success Rate</th>
                                    </tr>
                                </thead>
                                <tbody id="analyticsTableBody">
                                    <!-- Analytics data will be populated here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>

            <!-- Notifications Page -->
            <main id="notifications" class="page flex-1 overflow-y-auto p-6">
                <div class="bg-white p-6 rounded-xl shadow-md mb-6 border border-slate-200">
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-center gap-3">
                            <div class="bg-purple-100 p-2 rounded-full">
                                <i data-lucide="bell" class="w-6 h-6 text-purple-600"></i>
                            </div>
                            <h2 class="text-xl font-bold text-slate-800">Notifications</h2>
                        </div>
                        <button id="clearNotificationsBtn" class="bg-slate-200 text-slate-700 font-medium px-4 py-2 rounded-lg hover:bg-slate-300 transition-colors flex items-center gap-2">
                            <i data-lucide="trash-2" class="w-4 h-4"></i>
                            Clear All
                        </button>
                    </div>
                    
                    <div id="notificationsList" class="space-y-4">
                        <!-- Notifications will be inserted here -->
                    </div>
                    <div id="noNotifications" class="hidden text-center py-16">
                        <i data-lucide="bell-off" class="w-20 h-20 mx-auto text-gray-300"></i>
                        <p class="text-gray-500 mt-4 text-xl font-medium">No notifications.</p>
                        <p class="text-gray-400">You're all caught up! Check back later for updates.</p>
                    </div>
                </div>
            </main>

            <!-- Settings Page -->
            <main id="settings" class="page flex-1 overflow-y-auto p-6">
                <div class="bg-white p-6 rounded-xl shadow-md mb-6 border border-slate-200">
                    <div class="flex items-center gap-3 mb-6">
                        <div class="bg-blue-100 p-2 rounded-full">
                            <i data-lucide="settings" class="w-6 h-6 text-blue-600"></i>
                        </div>
                        <h2 class="text-xl font-bold text-slate-800">Settings</h2>
                    </div>
                    <p class="text-slate-600 mb-6">Configure all tool settings and tender eligibility criteria.</p>
                    
                    <!-- Role Selection Tabs -->
                    <div class="mb-8">
                        <h3 class="text-lg font-semibold text-slate-800 mb-4">Select Your Role</h3>
                        <div class="flex flex-wrap gap-2">
                            <div class="role-tab active" data-role="bidder">
                                <i data-lucide="user" class="w-4 h-4 mr-2"></i>
                                Bidder / Client
                            </div>
                            <div class="role-tab" data-role="consultant">
                                <i data-lucide="users" class="w-4 h-4 mr-2"></i>
                                Consultant / Advisor
                            </div>
                            <div class="role-tab" data-role="issuer">
                                <i data-lucide="file-text" class="w-4 h-4 mr-2"></i>
                                Issuer / Evaluator
                            </div>
                            <div class="role-tab" data-role="auditor">
                                <i data-lucide="shield-check" class="w-4 h-4 mr-2"></i>
                                Auditor / Regulator
                            </div>
                        </div>
                    </div>

                    <!-- Eligibility Settings Form -->
                    <form id="eligibilitySettingsForm" class="space-y-6">
                        <!-- Bidder/Client Settings -->
                        <div id="bidderSettings" class="role-settings active">
                            <h3 class="text-lg font-semibold text-slate-800 mb-4">Bidder / Client Eligibility Criteria</h3>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">My Experience (Years)</label>
                                <input type="number" id="bidderExperience" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., 5">
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">My Turnover (in Lakhs)</label>
                                <input type="number" id="bidderTurnover" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., 50">
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">My Certifications / Licenses</label>
                                <input type="text" id="bidderCertifications" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., ISO 9001, GST">
                                <p class="text-xs text-gray-500 mt-1">Enter certifications separated by commas</p>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">My Past Projects / References</label>
                                <textarea id="bidderReferences" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="List past project references"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">My Team / Personnel</label>
                                <textarea id="bidderPersonnel" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Describe your team and personnel qualifications"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">My Technical Resources / Machinery</label>
                                <textarea id="bidderResources" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Describe technical resources or machinery available"></textarea>
                            </div>
                        </div>

                        <!-- Consultant/Advisor Settings -->
                        <div id="consultantSettings" class="role-settings hidden">
                            <h3 class="text-lg font-semibold text-slate-800 mb-4">Consultant / Advisor Eligibility Criteria</h3>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Consultant Name / Organization</label>
                                <input type="text" id="consultantName" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., ABC Consulting">
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Client's Experience (Years)</label>
                                <input type="number" id="consultantExperience" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., 5">
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Client's Turnover (in Lakhs)</label>
                                <input type="number" id="consultantTurnover" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., 50">
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Client's Certifications / Licenses</label>
                                <input type="text" id="consultantCertifications" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., ISO 9001, GST">
                                <p class="text-xs text-gray-500 mt-1">Enter certifications separated by commas</p>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Client's Past Projects / References</label>
                                <textarea id="consultantReferences" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="List client's past project references"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Client's Team / Personnel</label>
                                <textarea id="consultantTeam" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Describe client's team and personnel qualifications"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Client's Technical Resources / Machinery</label>
                                <textarea id="consultantResources" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Describe client's technical resources or machinery"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Optional: Local Content / JV Rules / Special Licenses</label>
                                <textarea id="consultantOptional" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Any additional requirements"></textarea>
                            </div>
                        </div>

                        <!-- Issuer/Evaluator Settings -->
                        <div id="issuerSettings" class="role-settings hidden">
                            <h3 class="text-lg font-semibold text-slate-800 mb-4">Issuer / Evaluator Eligibility Criteria</h3>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Evaluator Name / Department</label>
                                <input type="text" id="issuerName" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., PWD Department">
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Minimum Experience Required (Years)</label>
                                <input type="number" id="issuerExperience" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., 5">
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Minimum Turnover Required (Lakhs)</label>
                                <input type="number" id="issuerTurnover" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., 50">
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Required Certifications / Licenses</label>
                                <input type="text" id="issuerCertifications" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., ISO 9001, GST">
                                <p class="text-xs text-gray-500 mt-1">Enter certifications separated by commas</p>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Required Past Projects / References</label>
                                <textarea id="issuerReferences" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="List required past project references"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Required Team / Personnel</label>
                                <textarea id="issuerTeam" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Describe required team and personnel qualifications"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Required Technical Resources / Machinery</label>
                                <textarea id="issuerResources" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Describe required technical resources or machinery"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Submission Format / Mode</label>
                                <input type="text" id="issuerSubmission" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., Online, Offline, Hybrid">
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Optional: Special Tender Clauses</label>
                                <textarea id="issuerOptional" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., Local content %, JV rules, etc."></textarea>
                            </div>
                        </div>

                        <!-- Auditor/Regulator Settings -->
                        <div id="auditorSettings" class="role-settings hidden">
                            <h3 class="text-lg font-semibold text-slate-800 mb-4">Auditor / Regulator Eligibility Criteria</h3>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Auditor Name / Department</label>
                                <input type="text" id="auditorName" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., CAG Office">
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Eligibility Criteria to be followed</label>
                                <textarea id="auditorCriteria" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Specify eligibility criteria compliance requirements"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Tender Process Timeline Compliance</label>
                                <textarea id="auditorTimeline" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Specify timeline compliance requirements"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Conflict of Interest Guidelines</label>
                                <textarea id="auditorConflict" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Specify conflict of interest requirements"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Grievance / Complaint Handling Rules</label>
                                <textarea id="auditorGrievance" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Specify grievance handling requirements"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Transparency & Audit Trail Requirements</label>
                                <textarea id="auditorTransparency" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Specify transparency and audit requirements"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Legal & Regulatory Compliance Rules</label>
                                <textarea id="auditorLegal" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Specify legal and regulatory compliance requirements"></textarea>
                            </div>
                            
                            <div class="eligibility-rule">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Optional Notes / Special Clauses</label>
                                <textarea id="auditorOptional" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" placeholder="Any additional requirements"></textarea>
                            </div>
                        </div>

                        <div class="flex justify-end gap-3 pt-4 border-t">
                            <button type="button" class="cancelBtn bg-gray-200 text-gray-800 font-semibold px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors">Cancel</button>
                            <button type="submit" class="bg-blue-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">Save Settings</button>
                        </div>
                    </form>
                </div>
            </main>
        </div>
    </div>
    
    <!-- Modals -->
    <!-- Add/Edit Tender Modal -->
    <div id="tenderModal" class="fixed inset-0 z-50 hidden items-center justify-center p-4 modal-backdrop">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl modal-content">
            <div class="p-5 border-b bg-slate-50 rounded-t-lg">
                <h2 id="modalTitle" class="text-xl font-bold text-gray-800">Add New Tender</h2>
            </div>
            <form id="tenderForm" class="p-6 space-y-4 max-h-[70vh] overflow-y-auto">
                <input type="hidden" id="tenderId">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="tenderName" class="block text-sm font-medium text-gray-700">Tender Name / ID</label>
                        <input type="text" id="tenderName" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" required>
                    </div>
                    <div>
                        <label for="department" class="block text-sm font-medium text-gray-700">Department / Organization</label>
                        <input type="text" id="department" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" required>
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="tenderType" class="block text-sm font-medium text-gray-700">Tender Type</label>
                        <select id="tenderType" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <option>Goods</option>
                            <option>Services</option>
                            <option>Works</option>
                        </select>
                    </div>
                    <div>
                        <label for="lastDate" class="block text-sm font-medium text-gray-700">Submission Date</label>
                        <input type="date" id="lastDate" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" required>
                    </div>
                </div>
                <fieldset class="border p-4 rounded-md">
                    <legend class="text-base font-medium text-gray-900 px-2">Eligibility Criteria</legend>
                    <div class="space-y-3 mt-2">
                        <div>
                            <label for="reqExperience" class="block text-sm font-medium text-gray-700">Required Minimum Experience (Years)</label>
                            <input type="number" id="reqExperience" placeholder="e.g., 5" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label for="reqTurnover" class="block text-sm font-medium text-gray-700">Required Minimum Turnover (in Lakhs)</label>
                            <input type="number" id="reqTurnover" placeholder="e.g., 50" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div class="tooltip">
                            <label for="reqCertifications" class="block text-sm font-medium text-gray-700">Required Certifications / Licenses</label>
                            <input type="text" id="reqCertifications" placeholder="e.g., ISO 9001, GST" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                            <span class="tooltiptext">Enter certifications separated by commas.</span>
                        </div>
                        <div>
                            <label for="reqProjects" class="block text-sm font-medium text-gray-700">Required Past Projects / References (Count)</label>
                            <input type="number" id="reqProjects" placeholder="e.g., 3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div>
                            <label for="reqTeam" class="block text-sm font-medium text-gray-700">Required Team / Personnel</label>
                            <textarea id="reqTeam" rows="2" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Describe required team and personnel qualifications"></textarea>
                        </div>
                        <div>
                            <label for="reqTechnical" class="block text-sm font-medium text-gray-700">Required Technical Resources / Machinery</label>
                            <textarea id="reqTechnical" rows="2" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Describe required technical resources or machinery"></textarea>
                        </div>
                    </div>
                </fieldset>
                <div>
                    <!-- FIX: Changed ID from "notes" to "tenderNotes" to avoid conflict -->
                    <label for="tenderNotes" class="block text-sm font-medium text-gray-700">Additional Notes</label>
                    <textarea id="tenderNotes" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"></textarea>
                </div>
                <div class="flex justify-end gap-3 pt-4 border-t mt-4">
                    <button type="button" class="cancelBtn bg-gray-200 text-gray-800 font-semibold px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors">Cancel</button>
                    <button type="submit" class="bg-blue-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">Save Tender</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Profile Modal -->
    <div id="profileModal" class="fixed inset-0 z-50 hidden items-center justify-center p-4 modal-backdrop">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-lg modal-content">
            <div class="p-5 border-b bg-slate-50 rounded-t-lg">
                <h2 class="text-xl font-bold text-gray-800">My Profile</h2>
                <p class="text-sm text-gray-500">Upload your company logo and set your company name.</p>
            </div>
            <form id="profileForm" class="p-6 space-y-4">
                <div class="flex flex-col items-center mb-4">
                    <div class="relative mb-4">
                        <img id="profileLogoPreview" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgU6G1GzNDYLaQhFjVHksDgPUg7SmmtU_-ARYjfHKYT5dWANn3LKOqMIV1RkplrlwCBvR7xo2NJFxCzmyHeOv7u6fVYliYFwERPf3aPRotbHxwWy39fbHbhevrCmPNzQsSue7Z_eIZQfW4rwXZJ6tkOwhlXu_lVotVuFSSs34dPUhOz7S1L9Sf1kXEUuBc/s320/photo_2025-10-01_08-16-00.jpg" alt="Profile Logo" class="profile-logo w-24 h-24">
                        <input type="file" id="logoUpload" accept="image/*" class="hidden">
                        <button type="button" id="uploadLogoBtn" class="absolute bottom-0 right-0 bg-blue-600 text-white p-2 rounded-full shadow-md hover:bg-blue-700 transition-colors">
                            <i data-lucide="camera" class="w-4 h-4"></i>
                        </button>
                    </div>
                    <p class="text-sm text-gray-500">Click the camera icon to upload your company logo</p>
                </div>
                <div>
                    <label for="companyName" class="block text-sm font-medium text-gray-700">Company Name</label>
                    <input type="text" id="companyName" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Enter your company name">
                </div>
                <div class="flex justify-end gap-3 pt-4 border-t">
                    <button type="button" class="cancelBtn bg-gray-200 text-gray-800 font-semibold px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors">Cancel</button>
                    <button type="submit" class="bg-blue-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">Save Profile</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Detail Modal -->
    <div id="detailModal" class="fixed inset-0 z-50 hidden items-center justify-center p-4 modal-backdrop">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl modal-content">
            <div class="p-5 border-b bg-slate-50 rounded-t-lg flex justify-between items-center">
                <h2 class="text-xl font-bold text-gray-800">Tender Details</h2>
                <button type="button" class="cancelBtn text-gray-400 hover:text-gray-600"><i data-lucide="x-circle" class="w-6 h-6"></i></button>
            </div>
            <div id="detailContent" class="p-6 space-y-4 max-h-[60vh] overflow-y-auto">
                <!-- Details will be injected here -->
            </div>
            <div id="detailActions" class="p-4 bg-gray-50 flex flex-wrap justify-end gap-3 border-t rounded-b-lg">
                <!-- Action buttons will be injected here -->
            </div>
        </div>
    </div>

    <!-- Email Modal -->
    <div id="emailModal" class="fixed inset-0 z-50 hidden items-center justify-center p-4 modal-backdrop">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl modal-content">
            <div class="p-5 border-b bg-slate-50 rounded-t-lg">
                <h2 class="text-xl font-bold text-gray-800">Send Tender Details via Email</h2>
            </div>
            <form id="emailForm" class="p-6 space-y-4">
                <div>
                    <label for="emailTo" class="block text-sm font-medium text-gray-700">To:</label>
                    <input type="email" id="emailTo" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" required placeholder="recipient@example.com">
                </div>
                <div>
                    <label for="emailSubject" class="block text-sm font-medium text-gray-700">Subject:</label>
                    <input type="text" id="emailSubject" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" required>
                </div>
                <div>
                    <label for="emailBody" class="block text-sm font-medium text-gray-700">Body:</label>
                    <textarea id="emailBody" rows="8" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"></textarea>
                </div>
                <div id="emailStatusMessage" class="text-sm text-center h-4"></div>
                <div class="flex justify-end gap-3 pt-4 border-t mt-4">
                    <button type="button" class="cancelBtn bg-gray-200 text-gray-800 font-semibold px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors">Cancel</button>
                    <button type="submit" class="bg-blue-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2 w-32">
                        <span id="sendEmailText">Send Email</span>
                        <div id="sendEmailSpinner" class="spinner hidden" style="width:20px; height:20px; border-width: 2px;"></div>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Enhanced: Add Competitor Modal -->
    <div id="competitorModal" class="fixed inset-0 z-50 hidden items-center justify-center p-4 modal-backdrop">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-2xl modal-content">
            <div class="p-5 border-b bg-slate-50 rounded-t-lg">
                <h2 id="competitorModalTitle" class="text-xl font-bold text-gray-800">Add Competitor</h2>
            </div>
            <form id="competitorForm" class="p-6 space-y-4 max-h-[70vh] overflow-y-auto">
                <input type="hidden" id="competitorId">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="competitorName" class="block text-sm font-medium text-gray-700">Competitor Name</label>
                        <input type="text" id="competitorName" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500" required>
                    </div>
                    <div>
                        <label for="competitorType" class="block text-sm font-medium text-gray-700">Type</label>
                        <select id="competitorType" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500" required>
                            <option value="">Select Type</option>
                            <option>Direct</option>
                            <option>Indirect</option>
                            <option>Potential</option>
                        </select>
                    </div>
                </div>
                <div>
                    <label for="competitorDescription" class="block text-sm font-medium text-gray-700">Description</label>
                    <textarea id="competitorDescription" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500"></textarea>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="competitorStrength" class="block text-sm font-medium text-gray-700">Strengths</label>
                        <textarea id="competitorStrength" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500"></textarea>
                    </div>
                    <div>
                        <label for="competitorWeakness" class="block text-sm font-medium text-gray-700">Weaknesses</label>
                        <textarea id="competitorWeakness" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500"></textarea>
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="competitorWinRate" class="block text-sm font-medium text-gray-700">Win Rate (%)</label>
                        <input type="number" id="competitorWinRate" min="0" max="100" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500">
                    </div>
                    <div>
                        <label for="competitorBidStyle" class="block text-sm font-medium text-gray-700">Bidding Style</label>
                        <select id="competitorBidStyle" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500">
                            <option value="">Select Style</option>
                            <option>Aggressive</option>
                            <option>Conservative</option>
                            <option>Strategic</option>
                            <option>Opportunistic</option>
                        </select>
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="competitorMarketShare" class="block text-sm font-medium text-gray-700">Market Share (%)</label>
                        <input type="number" id="competitorMarketShare" min="0" max="100" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500">
                    </div>
                    <div>
                        <label for="competitorThreatLevel" class="block text-sm font-medium text-gray-700">Threat Level</label>
                        <select id="competitorThreatLevel" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500">
                            <option value="">Select Level</option>
                            <option>Low</option>
                            <option>Medium</option>
                            <option>High</option>
                            <option>Critical</option>
                        </select>
                    </div>
                </div>
                <div class="flex justify-end gap-3 pt-4 border-t mt-4">
                    <button type="button" class="cancelBtn bg-gray-200 text-gray-800 font-semibold px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors">Cancel</button>
                    <button type="submit" class="bg-red-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">Save Competitor</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            lucide.createIcons();

            // State and UI elements are defined
            const state = {
                tenders: JSON.parse(localStorage.getItem('tenders')) || [],
                userProfile: JSON.parse(localStorage.getItem('userProfile')) || {
                    companyName: '',
                    logo: 'https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgU6G1GzNDYLaQhFjVHksDgPUg7SmmtU_-ARYjfHKYT5dWANn3LKOqMIV1RkplrlwCBvR7xo2NJFxCzmyHeOv7u6fVYliYFwERPf3aPRotbHxwWy39fbHbhevrCmPNzQsSue7Z_eIZQfW4rwXZJ6tkOwhlXu_lVotVuFSSs34dPUhOz7S1L9Sf1kXEUuBc/s320/photo_2025-10-01_08-16-00.jpg'
                },
                eligibilitySettings: JSON.parse(localStorage.getItem('eligibilitySettings')) || {
                    selectedRole: 'bidder',
                    bidder: {},
                    consultant: {},
                    issuer: {},
                    auditor: {}
                },
                googleToken: JSON.parse(localStorage.getItem('googleToken')) || null,
                reminderSettings: JSON.parse(localStorage.getItem('reminderSettings')) || {
                    enabled: true,
                    reminders: [
                        { type: '1_day', enabled: true, sent: [] },
                        { type: '3_days', enabled: true, sent: [] },
                        { type: '7_days', enabled: true, sent: [] },
                        { type: '0_days', enabled: true, sent: [] }
                    ],
                    dailySummary: false,
                    emailTemplate: "Attention! Tender {{tenderName}} ki last submission date {{deadline}} hai.\n\nDepartment: {{department}}\nTender Type: {{tenderType}}\n\nPlease ensure all eligibility criteria and documentation are ready.",
                    emailLogs: []
                },
                notifications: JSON.parse(localStorage.getItem('notifications')) || [],
                competitors: JSON.parse(localStorage.getItem('competitors')) || [],
                calendar: {
                    currentMonth: new Date().getMonth(),
                    currentYear: new Date().getFullYear()
                }
            };

            const ui = {
                sidebar: document.getElementById('sidebar'),
                menuBtn: document.getElementById('menuBtn'),
                overlay: document.getElementById('sidebar-overlay'),
                tenderModal: document.getElementById('tenderModal'),
                profileModal: document.getElementById('profileModal'),
                detailModal: document.getElementById('detailModal'),
                emailModal: document.getElementById('emailModal'),
                competitorModal: document.getElementById('competitorModal'),
                settingsPage: document.getElementById('settings'),
                tenderForm: document.getElementById('tenderForm'),
                profileForm: document.getElementById('profileForm'),
                eligibilitySettingsForm: document.getElementById('eligibilitySettingsForm'),
                emailForm: document.getElementById('emailForm'),
                competitorForm: document.getElementById('competitorForm'),
                tenderList: document.getElementById('tenderList'),
                noTenders: document.getElementById('noTenders'),
                filterStatus: document.getElementById('filterStatus'),
                filterDept: document.getElementById('filterDept'),
                filterType: document.getElementById('filterType'),
                clearFiltersBtn: document.getElementById('clearFiltersBtn'),
                connectGmailBtn: document.getElementById('connectGmailBtn'),
                disconnectGmailBtn: document.getElementById('disconnectGmailBtn'),
                gmailStatus: document.getElementById('gmailStatus'),
                statsContainer: document.getElementById('stats'),
                backupDataBtn: document.getElementById('backupDataBtn'),
                settingsBtn: document.getElementById('settingsBtn'),
                reminderStatus: document.getElementById('reminderStatus'),
                pendingRemindersCount: document.getElementById('pendingRemindersCount'),
                urgentDeadlineAlert: document.getElementById('urgentDeadlineAlert'),
                urgentAlertText: document.getElementById('urgentAlertText'),
                dismissAlertBtn: document.getElementById('dismissAlertBtn'),
                pages: document.querySelectorAll('.page'),
                navItems: document.querySelectorAll('.nav-item'),
                pageTitle: document.getElementById('pageTitle'),
                pageSubtitle: document.getElementById('pageSubtitle'),
                activeTendersList: document.getElementById('activeTendersList'),
                noActiveTenders: document.getElementById('noActiveTenders'),
                eligibleTendersList: document.getElementById('eligibleTendersList'),
                noEligibleTenders: document.getElementById('noEligibleTenders'),
                urgentTendersList: document.getElementById('urgentTendersList'),
                noUrgentTenders: document.getElementById('noUrgentTenders'),
                notesList: document.getElementById('notesList'),
                noNotes: document.getElementById('noNotes'),
                notificationsList: document.getElementById('notificationsList'),
                noNotifications: document.getElementById('noNotifications'),
                clearNotificationsBtn: document.getElementById('clearNotificationsBtn'),
                notificationBadge: document.getElementById('notificationBadge'),
                totalTendersCount: document.getElementById('totalTendersCount'),
                successRate: document.getElementById('successRate'),
                avgEligibility: document.getElementById('avgEligibility'),
                activeDepartments: document.getElementById('activeDepartments'),
                analyticsTableBody: document.getElementById('analyticsTableBody'),
                eligibilityScore: document.getElementById('eligibilityScore'),
                submissionRate: document.getElementById('submissionRate'),
                winProbability: document.getElementById('winProbability'),
                profileLogo: document.getElementById('profileLogo'),
                profileName: document.getElementById('profileName'),
                profileLogoPreview: document.getElementById('profileLogoPreview'),
                uploadLogoBtn: document.getElementById('uploadLogoBtn'),
                logoUpload: document.getElementById('logoUpload'),
                companyName: document.getElementById('companyName'),
                roleTabs: document.querySelectorAll('.role-tab'),
                roleSettings: document.querySelectorAll('.role-settings'),
                calendarMonth: document.getElementById('calendarMonth'),
                calendarGrid: document.getElementById('calendarGrid'),
                prevMonth: document.getElementById('prevMonth'),
                nextMonth: document.getElementById('nextMonth'),
                todayBtn: document.getElementById('todayBtn'),
                addCompetitorBtn: document.getElementById('addCompetitorBtn'),
                competitorsList: document.getElementById('competitorsList'),
                noCompetitors: document.getElementById('noCompetitors'),
                totalCompetitors: document.getElementById('totalCompetitors'),
                activeCompetitions: document.getElementById('activeCompetitions'),
                competitorWinRate: document.getElementById('competitorWinRate'),
                avgBidDifference: document.getElementById('avgBidDifference'),
                competitorModalTitle: document.getElementById('competitorModalTitle'),
                competitorFilter: document.getElementById('competitorFilter'),
                competitorSearch: document.getElementById('competitorSearch'),
                aggressiveCount: document.getElementById('aggressiveCount'),
                conservativeCount: document.getElementById('conservativeCount'),
                strategicCount: document.getElementById('strategicCount'),
                aggressiveBar: document.getElementById('aggressiveBar'),
                conservativeBar: document.getElementById('conservativeBar'),
                strategicBar: document.getElementById('strategicBar'),
                marketPositionScore: document.getElementById('marketPositionScore'),
                strengthCount: document.getElementById('strengthCount'),
                weaknessCount: document.getElementById('weaknessCount')
            };

            // --- Calendar Page Functions ---
            const renderCalendar = () => {
                const month = state.calendar.currentMonth;
                const year = state.calendar.currentYear;
                
                const monthNames = ["January", "February", "March", "April", "May", "June",
                    "July", "August", "September", "October", "November", "December"];
                ui.calendarMonth.textContent = `${monthNames[month]} ${year}`;
                
                const firstDay = new Date(year, month, 1).getDay();
                const daysInMonth = new Date(year, month + 1, 0).getDate();
                
                ui.calendarGrid.innerHTML = '';
                
                for (let i = 0; i < firstDay; i++) {
                    const emptyCell = document.createElement('div');
                    emptyCell.className = 'calendar-day bg-gray-100';
                    ui.calendarGrid.appendChild(emptyCell);
                }
                
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                
                for (let day = 1; day <= daysInMonth; day++) {
                    const dayCell = document.createElement('div');
                    dayCell.className = 'calendar-day';
                    
                    const currentDate = new Date(year, month, day);
                    
                    if (currentDate.getTime() === today.getTime()) {
                        dayCell.classList.add('today');
                    }
                    
                    const tendersOnDay = state.tenders.filter(tender => {
                        const tenderDate = new Date(tender.lastDate + 'T00:00:00');
                        return tenderDate.getDate() === day && 
                               tenderDate.getMonth() === month && 
                               tenderDate.getFullYear() === year;
                    });
                    
                    if (tendersOnDay.length > 0) {
                        dayCell.classList.add('has-tender');
                        
                        const urgentTender = tendersOnDay.find(tender => {
                            const deadline = getDeadlineStatus(tender);
                            return deadline.status === 'Urgent';
                        });
                        
                        if (urgentTender) {
                            dayCell.classList.add('urgent');
                        }
                    }
                    
                    const dayNumber = document.createElement('div');
                    dayNumber.className = 'text-sm font-semibold';
                    dayNumber.textContent = day;
                    dayCell.appendChild(dayNumber);
                    
                    if (tendersOnDay.length > 0) {
                        const tenderIndicator = document.createElement('div');
                        tenderIndicator.className = 'mt-1 space-y-1';
                        
                        tendersOnDay.slice(0, 2).forEach(tender => {
                            const tenderDot = document.createElement('div');
                            const deadline = getDeadlineStatus(tender);
                            
                            tenderDot.className = 'text-xs truncate px-1 rounded';
                            if (deadline.status === 'Urgent') {
                                tenderDot.classList.add('bg-red-200', 'text-red-800');
                            } else {
                                tenderDot.classList.add('bg-blue-200', 'text-blue-800');
                            }
                            
                            tenderDot.textContent = tender.tenderName.substring(0, 10) + '...';
                            tenderDot.title = tender.tenderName;
                            tenderIndicator.appendChild(tenderDot);
                        });
                        
                        if (tendersOnDay.length > 2) {
                            const moreIndicator = document.createElement('div');
                            moreIndicator.className = 'text-xs text-gray-500';
                            moreIndicator.textContent = `+${tendersOnDay.length - 2} more`;
                            tenderIndicator.appendChild(moreIndicator);
                        }
                        
                        dayCell.appendChild(tenderIndicator);
                    }
                    
                    ui.calendarGrid.appendChild(dayCell);
                }
            };

            ui.prevMonth.addEventListener('click', () => {
                if (state.calendar.currentMonth === 0) {
                    state.calendar.currentMonth = 11;
                    state.calendar.currentYear--;
                } else {
                    state.calendar.currentMonth--;
                }
                renderCalendar();
            });

            ui.nextMonth.addEventListener('click', () => {
                if (state.calendar.currentMonth === 11) {
                    state.calendar.currentMonth = 0;
                    state.calendar.currentYear++;
                } else {
                    state.calendar.currentMonth++;
                }
                renderCalendar();
            });

            ui.todayBtn.addEventListener('click', () => {
                const today = new Date();
                state.calendar.currentMonth = today.getMonth();
                state.calendar.currentYear = today.getFullYear();
                renderCalendar();
            });

            // --- ENHANCED: Competitor Analysis Functions ---
            const renderCompetitors = () => {
                ui.competitorsList.innerHTML = '';
                
                const typeFilter = ui.competitorFilter.value;
                const searchFilter = ui.competitorSearch.value.toLowerCase();
                
                const filteredCompetitors = state.competitors.filter(competitor => {
                    if (typeFilter !== 'all' && competitor.type !== typeFilter) return false;
                    if (searchFilter && !competitor.name.toLowerCase().includes(searchFilter) && 
                        !competitor.description.toLowerCase().includes(searchFilter)) return false;
                    return true;
                });
                
                ui.noCompetitors.classList.toggle('hidden', filteredCompetitors.length > 0);
                
                filteredCompetitors.forEach(competitor => {
                    const competitorCard = createCompetitorCard(competitor);
                    ui.competitorsList.innerHTML += competitorCard;
                });
                
                updateAdvancedCompetitorAnalysis();
                
                lucide.createIcons();
            };

            const createCompetitorCard = (competitor) => {
                const typeColors = {
                    'Direct': 'bg-red-100 text-red-800',
                    'Indirect': 'bg-yellow-100 text-yellow-800',
                    'Potential': 'bg-blue-100 text-blue-800'
                };
                
                const bidStyleColors = {
                    'Aggressive': 'strategy-aggressive',
                    'Conservative': 'strategy-conservative',
                    'Strategic': 'strategy-strategic',
                    'Opportunistic': 'strategy-opportunistic'
                };
                
                const threatColors = {
                    'Low': 'bg-green-100 text-green-800',
                    'Medium': 'bg-yellow-100 text-yellow-800',
                    'High': 'bg-orange-100 text-orange-800',
                    'Critical': 'bg-red-100 text-red-800'
                };
                
                const score = calculateCompetitorScore(competitor);
                
                return `
                    <div class="competitor-card">
                        <div class="flex items-start justify-between mb-3">
                            <div>
                                <h3 class="text-lg font-bold text-slate-800">${competitor.name}</h3>
                                <div class="flex items-center gap-2 mt-1">
                                    <span class="text-xs ${typeColors[competitor.type]} px-2 py-0.5 rounded-full font-medium">${competitor.type}</span>
                                    ${competitor.bidStyle ? `<span class="text-xs strategy-badge ${bidStyleColors[competitor.bidStyle]}">${competitor.bidStyle}</span>` : ''}
                                    ${competitor.threatLevel ? `<span class="text-xs ${threatColors[competitor.threatLevel]} px-2 py-0.5 rounded-full font-medium">${competitor.threatLevel} Threat</span>` : ''}
                                    ${competitor.winRate ? `<span class="text-xs bg-green-100 text-green-800 px-2 py-0.5 rounded-full font-medium">${competitor.winRate}% Win Rate</span>` : ''}
                                </div>
                            </div>
                            <div class="flex gap-1">
                                <button class="edit-competitor text-gray-400 hover:text-red-600 p-1" title="Edit Competitor" data-id="${competitor.id}">
                                    <i data-lucide="edit" class="w-4 h-4"></i>
                                </button>
                                <button class="delete-competitor text-gray-400 hover:text-red-600 p-1" title="Delete Competitor" data-id="${competitor.id}">
                                    <i data-lucide="trash-2" class="w-4 h-4"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="flex items-center justify-between mb-3">
                            <div class="competitor-score ${score >= 70 ? 'score-high' : score >= 40 ? 'score-medium' : 'score-low'}">
                                ${score}%
                            </div>
                            <div class="text-sm text-slate-500">
                                Competitor Score
                            </div>
                        </div>
                        
                        <p class="text-slate-600 mb-3">${competitor.description || 'No description provided.'}</p>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                            <div>
                                <h4 class="text-sm font-semibold text-slate-700 mb-1">Strengths</h4>
                                <p class="text-slate-600 text-sm">${competitor.strength || 'Not specified'}</p>
                            </div>
                            <div>
                                <h4 class="text-sm font-semibold text-slate-700 mb-1">Weaknesses</h4>
                                <p class="text-slate-600 text-sm">${competitor.weakness || 'Not specified'}</p>
                            </div>
                        </div>
                        
                        <div class="text-xs text-slate-500">
                            Last updated: ${new Date(competitor.updatedAt).toLocaleDateString()}
                        </div>
                    </div>
                `;
            };

            const calculateCompetitorScore = (competitor) => {
                let score = 50; 
                
                if (competitor.winRate) {
                    score += (parseInt(competitor.winRate) - 50) * 0.3;
                }
                
                if (competitor.marketShare) {
                    score += (parseInt(competitor.marketShare) - 20) * 0.2;
                }
                
                if (competitor.threatLevel) {
                    const threatMultiplier = {
                        'Low': -0.2,
                        'Medium': 0,
                        'High': 0.2,
                        'Critical': 0.4
                    };
                    score += threatMultiplier[competitor.threatLevel] * 20;
                }
                
                return Math.min(100, Math.max(0, Math.round(score)));
            };

            const updateAdvancedCompetitorAnalysis = () => {
                ui.totalCompetitors.textContent = state.competitors.length;
                ui.activeCompetitions.textContent = state.tenders.filter(t => t.status === 'active' && !isExpired(t)).length;
                
                const totalWinRate = state.competitors.reduce((sum, comp) => sum + (parseInt(comp.winRate) || 0), 0);
                const avgWinRate = state.competitors.length > 0 ? Math.round(totalWinRate / state.competitors.length) : 0;
                ui.competitorWinRate.textContent = `${avgWinRate}%`;
                
                ui.avgBidDifference.textContent = '5%';
                
                const aggressiveCount = state.competitors.filter(c => c.bidStyle === 'Aggressive').length;
                const conservativeCount = state.competitors.filter(c => c.bidStyle === 'Conservative').length;
                const strategicCount = state.competitors.filter(c => c.bidStyle === 'Strategic').length;
                const opportunisticCount = state.competitors.filter(c => c.bidStyle === 'Opportunistic').length;
                
                const totalWithStyle = aggressiveCount + conservativeCount + strategicCount + opportunisticCount;
                
                ui.aggressiveCount.textContent = aggressiveCount;
                ui.conservativeCount.textContent = conservativeCount;
                ui.strategicCount.textContent = strategicCount;
                
                if (totalWithStyle > 0) {
                    ui.aggressiveBar.style.width = `${(aggressiveCount / totalWithStyle) * 100}%`;
                    ui.conservativeBar.style.width = `${(conservativeCount / totalWithStyle) * 100}%`;
                    ui.strategicBar.style.width = `${(strategicCount / totalWithStyle) * 100}%`;
                } else {
                    ui.aggressiveBar.style.width = '0%';
                    ui.conservativeBar.style.width = '0%';
                    ui.strategicBar.style.width = '0%';
                }
                
                const totalScore = state.competitors.reduce((sum, comp) => sum + calculateCompetitorScore(comp), 0);
                const avgScore = state.competitors.length > 0 ? Math.round(totalScore / state.competitors.length) : 0;
                ui.marketPositionScore.textContent = `${100 - avgScore}%`;
                
                const strengthCount = state.competitors.filter(c => c.strength && c.strength.trim() !== '').length;
                const weaknessCount = state.competitors.filter(c => c.weakness && c.weakness.trim() !== '').length;
                
                ui.strengthCount.textContent = strengthCount;
                ui.weaknessCount.textContent = weaknessCount;
                
                renderCompetitorComparisonChart();
            };

            const renderCompetitorComparisonChart = () => {
                const ctx = document.getElementById('competitorComparisonChart').getContext('2d');
                
                const topCompetitors = [...state.competitors]
                    .sort((a, b) => calculateCompetitorScore(b) - calculateCompetitorScore(a))
                    .slice(0, 5);
                
                const competitorNames = topCompetitors.map(c => c.name);
                const competitorScores = topCompetitors.map(c => calculateCompetitorScore(c));
                const competitorWinRates = topCompetitors.map(c => parseInt(c.winRate) || 0);
                
                if (window.competitorComparisonChartInstance) {
                    window.competitorComparisonChartInstance.destroy();
                }

                window.competitorComparisonChartInstance = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: competitorNames,
                        datasets: [
                            {
                                label: 'Competitor Score',
                                data: competitorScores,
                                backgroundColor: '#ef4444',
                                borderColor: '#dc2626',
                                borderWidth: 1
                            },
                            {
                                label: 'Win Rate (%)',
                                data: competitorWinRates,
                                backgroundColor: '#3b82f6',
                                borderColor: '#1d4ed8',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100,
                                ticks: {
                                    callback: function(value) {
                                        return value + '%';
                                    }
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return `${context.dataset.label}: ${context.raw}%`;
                                    }
                                }
                            }
                        }
                    }
                });
            };

            ui.addCompetitorBtn.addEventListener('click', () => {
                ui.competitorModalTitle.textContent = 'Add Competitor';
                ui.competitorForm.reset();
                document.getElementById('competitorId').value = '';
                openModal(ui.competitorModal);
            });

            ui.competitorForm.addEventListener('submit', (e) => {
                e.preventDefault();
                
                const competitorId = document.getElementById('competitorId').value;
                const competitorData = {
                    id: competitorId || Date.now().toString(),
                    name: document.getElementById('competitorName').value,
                    type: document.getElementById('competitorType').value,
                    description: document.getElementById('competitorDescription').value,
                    strength: document.getElementById('competitorStrength').value,
                    weakness: document.getElementById('competitorWeakness').value,
                    winRate: document.getElementById('competitorWinRate').value,
                    bidStyle: document.getElementById('competitorBidStyle').value,
                    marketShare: document.getElementById('competitorMarketShare').value,
                    threatLevel: document.getElementById('competitorThreatLevel').value,
                    createdAt: competitorId ? state.competitors.find(c => c.id === competitorId).createdAt : new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                };
                
                if (competitorId) {
                    const index = state.competitors.findIndex(c => c.id === competitorId);
                    state.competitors[index] = competitorData;
                } else {
                    state.competitors.unshift(competitorData);
                }
                
                localStorage.setItem('competitors', JSON.stringify(state.competitors));
                renderCompetitors();
                closeModal(ui.competitorModal);
                
                addNotification(
                    competitorId ? 'Competitor Updated' : 'Competitor Added',
                    `Competitor "${competitorData.name}" has been ${competitorId ? 'updated' : 'added'}.`,
                    'info',
                    'users'
                );
            });

            ui.competitorsList.addEventListener('click', (e) => {
                const editBtn = e.target.closest('.edit-competitor');
                const deleteBtn = e.target.closest('.delete-competitor');
                
                if (editBtn) {
                    const competitor = state.competitors.find(c => c.id === editBtn.dataset.id);
                    if (competitor) {
                        ui.competitorModalTitle.textContent = 'Edit Competitor';
                        document.getElementById('competitorId').value = competitor.id;
                        document.getElementById('competitorName').value = competitor.name;
                        document.getElementById('competitorType').value = competitor.type;
                        document.getElementById('competitorDescription').value = competitor.description || '';
                        document.getElementById('competitorStrength').value = competitor.strength || '';
                        document.getElementById('competitorWeakness').value = competitor.weakness || '';
                        document.getElementById('competitorWinRate').value = competitor.winRate || '';
                        document.getElementById('competitorBidStyle').value = competitor.bidStyle || '';
                        document.getElementById('competitorMarketShare').value = competitor.marketShare || '';
                        document.getElementById('competitorThreatLevel').value = competitor.threatLevel || '';
                        openModal(ui.competitorModal);
                    }
                }
                
                if (deleteBtn) {
                    const competitorId = deleteBtn.dataset.id;
                    const competitor = state.competitors.find(c => c.id === competitorId);
                    showCustomConfirm('Are you sure you want to delete this competitor?', () => {
                         state.competitors = state.competitors.filter(c => c.id !== competitorId);
                         localStorage.setItem('competitors', JSON.stringify(state.competitors));
                         renderCompetitors();
                         
                         addNotification(
                             'Competitor Deleted',
                             `Competitor "${competitor.name}" has been deleted.`,
                             'warning',
                             'trash-2'
                         );
                    });
                }
            });

            ui.competitorFilter.addEventListener('change', renderCompetitors);
            ui.competitorSearch.addEventListener('input', renderCompetitors);

            // Profile Page Functions
            const initializeProfile = () => {
                ui.profileLogo.src = state.userProfile.logo;
                ui.profileLogoPreview.src = state.userProfile.logo;
                ui.profileName.textContent = state.userProfile.companyName || 'My Profile';
                ui.companyName.value = state.userProfile.companyName || '';
            };

            ui.uploadLogoBtn.addEventListener('click', () => {
                ui.logoUpload.click();
            });

            ui.logoUpload.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        const logoUrl = event.target.result;
                        ui.profileLogoPreview.src = logoUrl;
                        state.userProfile.tempLogo = logoUrl;
                    };
                    reader.readAsDataURL(file);
                }
            });

            ui.profileForm.addEventListener('submit', (e) => {
                e.preventDefault();
                
                state.userProfile.companyName = ui.companyName.value;
                if (state.userProfile.tempLogo) {
                    state.userProfile.logo = state.userProfile.tempLogo;
                    delete state.userProfile.tempLogo;
                }
                
                ui.profileLogo.src = state.userProfile.logo;
                ui.profileName.textContent = state.userProfile.companyName || 'My Profile';
                
                localStorage.setItem('userProfile', JSON.stringify(state.userProfile));
                
                closeModal(ui.profileModal);
                
                addNotification(
                    'Profile Updated',
                    'Your company profile has been updated successfully.',
                    'info',
                    'user-check'
                );
            });

            // Settings Page Functions
            const initializeSettings = () => {
                ui.roleTabs.forEach(tab => {
                    tab.addEventListener('click', () => {
                        ui.roleTabs.forEach(t => t.classList.remove('active'));
                        tab.classList.add('active');
                        
                        ui.roleSettings.forEach(setting => setting.classList.add('hidden'));
                        const role = tab.dataset.role;
                        document.getElementById(`${role}Settings`).classList.remove('hidden');
                        
                        state.eligibilitySettings.selectedRole = role;
                        
                        loadRoleSettings(role);
                    });
                });
                
                loadRoleSettings(state.eligibilitySettings.selectedRole);
                
                ui.roleTabs.forEach(tab => {
                    if (tab.dataset.role === state.eligibilitySettings.selectedRole) {
                        tab.classList.add('active');
                    }
                });
            };

            const loadRoleSettings = (role) => {
                const settings = state.eligibilitySettings[role] || {};
                
                const formElements = document.querySelectorAll(`#${role}Settings input, #${role}Settings textarea, #${role}Settings select`);
                formElements.forEach(element => {
                    const fieldName = element.id.replace(role, '').toLowerCase();
                    
                    if (element.type === 'checkbox') {
                        element.checked = settings[fieldName] || false;
                    } else if (element.type === 'number') {
                        element.value = settings[fieldName] || '';
                    } else {
                        element.value = settings[fieldName] || '';
                    }
                });
            };

            const saveRoleSettings = (role) => {
                const settings = {};
                
                const formElements = document.querySelectorAll(`#${role}Settings input, #${role}Settings textarea, #${role}Settings select`);
                formElements.forEach(element => {
                    const fieldName = element.id.replace(role, '').toLowerCase();
                    
                    if (element.type === 'checkbox') {
                        settings[fieldName] = element.checked;
                    } else if (element.type === 'number') {
                        settings[fieldName] = element.value ? parseFloat(element.value) : null;
                    } else {
                        settings[fieldName] = element.value;
                    }
                });
                
                state.eligibilitySettings[role] = settings;
                localStorage.setItem('eligibilitySettings', JSON.stringify(state.eligibilitySettings));
            };

            ui.eligibilitySettingsForm.addEventListener('submit', (e) => {
                e.preventDefault();
                
                saveRoleSettings(state.eligibilitySettings.selectedRole);
                
                navigateToPage('dashboard');
                
                addNotification(
                    'Settings Saved',
                    `Your ${state.eligibilitySettings.selectedRole} eligibility settings have been saved.`,
                    'info',
                    'settings'
                );
            });

            // Enhanced Eligibility Check
            const checkEligibility = (tender) => {
                const role = state.eligibilitySettings.selectedRole;
                const settings = state.eligibilitySettings[role] || {};
                
                let matchCount = 0;
                let totalCriteria = 0;
                let reasons = [];
                
                switch(role) {
                    case 'bidder':
                        if (settings.experience && tender.criteria.experience) {
                            totalCriteria++;
                            if (parseInt(settings.experience) >= parseInt(tender.criteria.experience)) {
                                matchCount++;
                            } else {
                                reasons.push(`Experience (${settings.experience}y < ${tender.criteria.experience}y)`);
                            }
                        }
                        
                        if (settings.turnover && tender.criteria.turnover) {
                            totalCriteria++;
                            if (parseInt(settings.turnover) >= parseInt(tender.criteria.turnover)) {
                                matchCount++;
                            } else {
                                reasons.push(`Turnover (${settings.turnover}L < ${tender.criteria.turnover}L)`);
                            }
                        }
                        
                        if (settings.certifications && tender.criteria.certifications && tender.criteria.certifications.length > 0) {
                            totalCriteria++;
                            const myCerts = new Set(settings.certifications.split(',').map(c => c.trim().toLowerCase()));
                            const reqCerts = tender.criteria.certifications.map(c => c.trim().toLowerCase());
                            const missingCerts = reqCerts.filter(c => !myCerts.has(c));
                            if (missingCerts.length === 0) {
                                matchCount++;
                            } else {
                                reasons.push(`Missing certs: ${missingCerts.join(', ')}`);
                            }
                        }
                        break;
                        
                    case 'consultant':
                        if (settings.experience && tender.criteria.experience) {
                            totalCriteria++;
                            if (parseInt(settings.experience) >= parseInt(tender.criteria.experience)) {
                                matchCount++;
                            } else {
                                reasons.push(`Client Experience (${settings.experience}y < ${tender.criteria.experience}y)`);
                            }
                        }
                        
                        if (settings.turnover && tender.criteria.turnover) {
                            totalCriteria++;
                            if (parseInt(settings.turnover) >= parseInt(tender.criteria.turnover)) {
                                matchCount++;
                            } else {
                                reasons.push(`Client Turnover (${settings.turnover}L < ${tender.criteria.turnover}L)`);
                            }
                        }
                        break;
                        
                    case 'issuer':
                        if (settings.experience && tender.criteria.experience) {
                            totalCriteria++;
                            if (parseInt(settings.experience) >= parseInt(tender.criteria.experience)) {
                                matchCount++;
                            } else {
                                reasons.push(`Experience requirement (${settings.experience}y < ${tender.criteria.experience}y)`);
                            }
                        }
                        break;
                        
                    case 'auditor':
                        if (settings.timeline) {
                            totalCriteria++;
                            matchCount++; // Assuming timeline is met
                        }
                        break;
                }
                
                if (totalCriteria === 0) return { status: 'Eligible', reason: 'No specific eligibility criteria to check.' };
                if (matchCount === totalCriteria) return { status: 'Eligible', reason: 'All criteria matched.' };
                if (matchCount > 0) return { status: 'Partially Eligible', reason: `Issues: ${reasons.join('; ')}` };
                return { status: 'Not Eligible', reason: `Issues: ${reasons.join('; ')}` };
            };

            // Notes Page Functions
            const renderNotesPage = () => {
                ui.notesList.innerHTML = '';
                
                const tendersWithNotes = state.tenders.filter(tender => 
                    tender.notes && tender.notes.trim() !== ''
                );
                
                ui.noNotes.classList.toggle('hidden', tendersWithNotes.length > 0);
                
                tendersWithNotes.forEach(tender => {
                    const noteItem = createNoteItem(tender);
                    ui.notesList.innerHTML += noteItem;
                });
                
                lucide.createIcons();
            };

            const createNoteItem = (tender) => {
                const deadline = getDeadlineStatus(tender);
                const eligibility = checkEligibility(tender);
                
                return `
                    <div class="bg-white p-5 rounded-xl shadow-md border border-slate-200">
                        <div class="flex items-start justify-between mb-3">
                            <div>
                                <h3 class="text-lg font-bold text-slate-800">${tender.tenderName}</h3>
                                <div class="flex items-center gap-2 mt-1">
                                    <span class="text-sm bg-slate-200 text-slate-800 px-2 py-0.5 rounded-full font-medium">${tender.department}</span>
                                    <span class="text-sm bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full font-medium">${tender.tenderType}</span>
                                    <span class="text-sm ${eligibility.status === 'Eligible' ? 'bg-green-100 text-green-800' : eligibility.status === 'Partially Eligible' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'} px-2 py-0.5 rounded-full font-medium">${eligibility.status}</span>
                                </div>
                            </div>
                            <div class="flex gap-1">
                                <button class="view-btn text-gray-400 hover:text-green-600 p-1" title="View Tender" data-id="${tender.id}">
                                    <i data-lucide="eye" class="w-5 h-5"></i>
                                </button>
                            </div>
                        </div>
                        <div class="relative bg-slate-50 p-4 rounded-lg group">
                            <p class="text-slate-700 whitespace-pre-wrap">${tender.notes}</p>
                            <button class="delete-note-btn absolute top-2 right-2 text-slate-400 hover:text-red-600 p-1 opacity-0 group-hover:opacity-100 transition-opacity" title="Delete Note" data-id="${tender.id}">
                                <i data-lucide="trash-2" class="w-4 h-4"></i>
                            </button>
                        </div>
                        <div class="flex justify-between items-center mt-3 text-sm text-slate-500">
                            <span>Deadline: ${new Date(tender.lastDate + 'T00:00:00').toLocaleDateString()}</span>
                            <span class="${deadline.status === 'Urgent' || deadline.status === 'Expired' || deadline.status === 'Completed' ? 'text-red-600 font-medium' : ''}">${deadline.text}</span>
                        </div>
                    </div>
                `;
            };

            // Advanced Analytics Functions
            const renderAdvancedAnalytics = () => {
                updateAnalyticsCards();
                renderAnalyticsCharts();
                renderAnalyticsTable();
                updateAdvancedAnalyticsCards();
            };

            const updateAdvancedAnalyticsCards = () => {
                const activeTenders = state.tenders.filter(t => t.status === 'active' && !isExpired(t));
                let totalEligibilityScore = 0;
                
                activeTenders.forEach(tender => {
                    const eligibility = checkEligibility(tender);
                    if (eligibility.status === 'Eligible') totalEligibilityScore += 100;
                    else if (eligibility.status === 'Partially Eligible') totalEligibilityScore += 50;
                });
                
                const avgEligibilityScore = activeTenders.length > 0 ? 
                    Math.round(totalEligibilityScore / activeTenders.length) : 0;
                
                const eligibleTenders = activeTenders.filter(t => 
                    checkEligibility(t).status === 'Eligible'
                );
                const submittedTenders = state.tenders.filter(t => 
                    t.status === 'completed'
                ).length;
                
                const submissionRate = eligibleTenders.length > 0 ? 
                    Math.round((submittedTenders / eligibleTenders.length) * 100) : 0;
                
                const completedTenders = state.tenders.filter(t => t.status === 'completed').length;
                const totalTenders = state.tenders.length;
                const baseWinRate = totalTenders > 0 ? 
                    Math.round((completedTenders / totalTenders) * 100) : 0;
                
                const winProbability = Math.min(100, Math.round(
                    baseWinRate + (avgEligibilityScore / 100) * (100 - baseWinRate)
                ));
                
                ui.eligibilityScore.textContent = `${avgEligibilityScore}%`;
                ui.submissionRate.textContent = `${submissionRate}%`;
                ui.winProbability.textContent = `${winProbability}%`;
            };

            // Analytics Functions
            const renderAnalytics = () => {
                updateAnalyticsCards();
                renderAnalyticsCharts();
                renderAnalyticsTable();
                updateAdvancedAnalyticsCards();
            };

            const updateAnalyticsCards = () => {
                const totalTenders = state.tenders.length;
                const completedTenders = state.tenders.filter(t => t.status === 'completed').length;
                const successRate = totalTenders > 0 ? Math.round((completedTenders / totalTenders) * 100) : 0;
                
                const eligibleTenders = state.tenders.filter(t => {
                    if (t.status !== 'active' || isExpired(t)) return false;
                    const eligibility = checkEligibility(t);
                    return eligibility.status === 'Eligible';
                }).length;
                
                const activeTenders = state.tenders.filter(t => t.status === 'active' && !isExpired(t)).length;
                const avgEligibility = activeTenders > 0 ? Math.round((eligibleTenders / activeTenders) * 100) : 0;
                
                const departments = new Set(state.tenders.map(t => t.department));
                
                ui.totalTendersCount.textContent = totalTenders;
                ui.successRate.textContent = `${successRate}%`;
                ui.avgEligibility.textContent = `${avgEligibility}%`;
                ui.activeDepartments.textContent = departments.size;
            };

            const renderAnalyticsCharts = () => {
                renderStatusChart();
                renderDepartmentChart();
                renderMonthlyTrendsChart();
                renderEligibilityChart();
            };

            const renderStatusChart = () => {
                const ctx = document.getElementById('statusChart').getContext('2d');
                const activeTenders = state.tenders.filter(t => t.status === 'active' && !isExpired(t)).length;
                const completedTenders = state.tenders.filter(t => t.status === 'completed').length;
                const expiredTenders = state.tenders.filter(t => isExpired(t) && t.status !== 'completed').length;

                if (window.statusChartInstance) {
                    window.statusChartInstance.destroy();
                }

                window.statusChartInstance = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Active', 'Completed', 'Expired'],
                        datasets: [{
                            data: [activeTenders, completedTenders, expiredTenders],
                            backgroundColor: [
                                '#3b82f6',
                                '#10b981',
                                '#ef4444'
                            ],
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true
                                }
                            }
                        }
                    }
                });
            };

            const renderDepartmentChart = () => {
                const ctx = document.getElementById('departmentChart').getContext('2d');
                
                const departmentCounts = {};
                state.tenders.forEach(tender => {
                    departmentCounts[tender.department] = (departmentCounts[tender.department] || 0) + 1;
                });

                const departments = Object.keys(departmentCounts);
                const counts = Object.values(departmentCounts);

                if (window.departmentChartInstance) {
                    window.departmentChartInstance.destroy();
                }

                window.departmentChartInstance = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: departments,
                        datasets: [{
                            label: 'Number of Tenders',
                            data: counts,
                            backgroundColor: '#8b5cf6',
                            borderColor: '#7c3aed',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    }
                });
            };

            const renderMonthlyTrendsChart = () => {
                const ctx = document.getElementById('monthlyTrendsChart').getContext('2d');
                
                const monthlyCounts = {};
                state.tenders.forEach(tender => {
                    const month = new Date(tender.lastDate).toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
                    monthlyCounts[month] = (monthlyCounts[month] || 0) + 1;
                });

                const months = Object.keys(monthlyCounts);
                const counts = Object.values(monthlyCounts);

                if (window.monthlyTrendsChartInstance) {
                    window.monthlyTrendsChartInstance.destroy();
                }

                window.monthlyTrendsChartInstance = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: months,
                        datasets: [{
                            label: 'Tenders per Month',
                            data: counts,
                            borderColor: '#f59e0b',
                            backgroundColor: 'rgba(245, 158, 11, 0.1)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        }
                    }
                });
            };

            const renderEligibilityChart = () => {
                const ctx = document.getElementById('eligibilityChart').getContext('2d');
                
                const activeTenders = state.tenders.filter(t => t.status === 'active' && !isExpired(t));
                let eligible = 0, partiallyEligible = 0, notEligible = 0;

                activeTenders.forEach(tender => {
                    const eligibility = checkEligibility(tender);
                    if (eligibility.status === 'Eligible') eligible++;
                    else if (eligibility.status === 'Partially Eligible') partiallyEligible++;
                    else notEligible++;
                });

                if (window.eligibilityChartInstance) {
                    window.eligibilityChartInstance.destroy();
                }

                window.eligibilityChartInstance = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: ['Eligible', 'Partially Eligible', 'Not Eligible'],
                        datasets: [{
                            data: [eligible, partiallyEligible, notEligible],
                            backgroundColor: [
                                '#10b981',
                                '#f59e0b',
                                '#ef4444'
                            ],
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true
                                }
                            }
                        }
                    }
                });
            };

            const renderAnalyticsTable = () => {
                const departmentStats = {};
                
                state.tenders.forEach(tender => {
                    if (!departmentStats[tender.department]) {
                        departmentStats[tender.department] = {
                            total: 0,
                            active: 0,
                            completed: 0,
                            eligible: 0
                        };
                    }
                    
                    departmentStats[tender.department].total++;
                    
                    if (tender.status === 'active' && !isExpired(tender)) {
                        departmentStats[tender.department].active++;
                        const eligibility = checkEligibility(tender);
                        if (eligibility.status === 'Eligible') {
                            departmentStats[tender.department].eligible++;
                        }
                    } else if (tender.status === 'completed') {
                        departmentStats[tender.department].completed++;
                    }
                });

                let tableHTML = '';
                Object.entries(departmentStats).forEach(([dept, stats]) => {
                    const successRate = stats.total > 0 ? Math.round((stats.completed / stats.total) * 100) : 0;
                    
                    tableHTML += `
                        <tr class="border-b border-slate-100">
                            <td class="px-4 py-3 font-medium">${dept}</td>
                            <td class="px-4 py-3">${stats.total}</td>
                            <td class="px-4 py-3">${stats.active}</td>
                            <td class="px-4 py-3">${stats.completed}</td>
                            <td class="px-4 py-3">${stats.eligible}</td>
                            <td class="px-4 py-3">
                                <span class="px-2 py-1 rounded-full text-xs font-medium ${successRate >= 70 ? 'bg-green-100 text-green-800' : successRate >= 40 ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}">
                                    ${successRate}%
                                </span>
                            </td>
                        </tr>
                    `;
                });

                ui.analyticsTableBody.innerHTML = tableHTML || '<tr><td colspan="6" class="px-4 py-3 text-center text-slate-500">No data available</td></tr>';
            };

            // Page Navigation System
            const navigateToPage = (pageId) => {
                ui.pages.forEach(page => {
                    page.classList.remove('active');
                });
                
                document.getElementById(pageId).classList.add('active');
                
                ui.navItems.forEach(item => {
                    item.classList.remove('active');
                    if (item.dataset.page === pageId) {
                        item.classList.add('active');
                    }
                });
                
                updatePageTitle(pageId);
                
                renderPageContent(pageId);
            };

            const updatePageTitle = (pageId) => {
                const titles = {
                    'dashboard': 'Tender Dashboard',
                    'activeTenders': 'Active Tenders',
                    'eligibleTenders': 'Eligible Tenders',
                    'urgentDeadlines': 'Urgent Deadlines',
                    'tenderCalendar': 'Tender Calendar',
                    'competitorAnalysis': 'Competitor Analysis',
                    'notes': 'Tender Notes',
                    'analytics': 'Tender Analytics',
                    'notifications': 'Notifications',
                    'settings': 'Settings'
                };
                
                const subtitles = {
                    'dashboard': 'Track, manage, and check eligibility for all your tenders.',
                    'activeTenders': 'All currently active tenders that are not expired or completed.',
                    'eligibleTenders': 'Tenders that match your eligibility criteria based on your profile.',
                    'urgentDeadlines': 'Tenders with deadlines approaching within the next 2 days.',
                    'tenderCalendar': 'Visual calendar view of all tender deadlines and important dates.',
                    'competitorAnalysis': 'Track and analyze competitor bidding patterns and performance with advanced analytics.',
                    'notes': 'All tender notes organized by tender name.',
                    'analytics': 'Comprehensive analytics and insights about your tender performance.',
                    'notifications': 'Stay updated with tender notifications and alerts.',
                    'settings': 'Configure all tool settings and tender eligibility criteria.'
                };
                
                ui.pageTitle.textContent = titles[pageId] || 'Tender Manager';
                ui.pageSubtitle.textContent = subtitles[pageId] || '';
            };

            const renderPageContent = (pageId) => {
                switch(pageId) {
                    case 'activeTenders':
                        renderActiveTenders();
                        break;
                    case 'eligibleTenders':
                        renderEligibleTenders();
                        break;
                    case 'urgentDeadlines':
                        renderUrgentTenders();
                        break;
                    case 'tenderCalendar':
                        renderCalendar();
                        break;
                    case 'competitorAnalysis':
                        renderCompetitors();
                        break;
                    case 'notes':
                        renderNotesPage();
                        break;
                    case 'analytics':
                        renderAdvancedAnalytics();
                        break;
                    case 'notifications':
                        renderNotifications();
                        break;
                    case 'settings':
                        initializeSettings();
                        break;
                    default:
                        break;
                }
            };

            const renderActiveTenders = () => {
                ui.activeTendersList.innerHTML = '';
                const activeTenders = state.tenders.filter(tender => 
                    tender.status === 'active' && !isExpired(tender)
                );
                
                ui.noActiveTenders.classList.toggle('hidden', activeTenders.length > 0);
                
                activeTenders.forEach(tender => {
                    const eligibility = checkEligibility(tender);
                    const deadline = getDeadlineStatus(tender);
                    const tenderCard = createTenderCard(tender, eligibility, deadline);
                    ui.activeTendersList.innerHTML += tenderCard;
                });
                
                lucide.createIcons();
            };

            const renderEligibleTenders = () => {
                ui.eligibleTendersList.innerHTML = '';
                const eligibleTenders = state.tenders.filter(tender => {
                    if (tender.status !== 'active' || isExpired(tender)) return false;
                    const eligibility = checkEligibility(tender);
                    return eligibility.status === 'Eligible';
                });
                
                ui.noEligibleTenders.classList.toggle('hidden', eligibleTenders.length > 0);
                
                eligibleTenders.forEach(tender => {
                    const eligibility = checkEligibility(tender);
                    const deadline = getDeadlineStatus(tender);
                    const tenderCard = createTenderCard(tender, eligibility, deadline);
                    ui.eligibleTendersList.innerHTML += tenderCard;
                });
                
                lucide.createIcons();
            };

            const renderUrgentTenders = () => {
                ui.urgentTendersList.innerHTML = '';
                const urgentTenders = state.tenders.filter(tender => {
                    if (tender.status !== 'active' || isExpired(tender)) return false;
                    const deadline = getDeadlineStatus(tender);
                    return deadline.status === 'Urgent';
                });
                
                ui.noUrgentTenders.classList.toggle('hidden', urgentTenders.length > 0);
                
                urgentTenders.forEach(tender => {
                    const eligibility = checkEligibility(tender);
                    const deadline = getDeadlineStatus(tender);
                    const tenderCard = createTenderCard(tender, eligibility, deadline);
                    ui.urgentTendersList.innerHTML += tenderCard;
                });
                
                lucide.createIcons();
            };

            const renderNotifications = () => {
                ui.notificationsList.innerHTML = '';
                
                ui.noNotifications.classList.toggle('hidden', state.notifications.length > 0);
                
                state.notifications.forEach(notification => {
                    const notificationItem = createNotificationItem(notification);
                    ui.notificationsList.innerHTML += notificationItem;
                });
                
                lucide.createIcons();
                updateNotificationBadge();
            };

            const createNotificationItem = (notification) => {
                const urgencyClass = notification.type === 'urgent' ? 'urgent' : 
                                     notification.type === 'warning' ? 'warning' : '';
                
                return `
                    <div class="notification-item ${urgencyClass} bg-white p-4 rounded-lg shadow-sm border border-slate-200">
                        <div class="flex items-start justify-between">
                            <div class="flex-1">
                                <div class="flex items-center gap-2 mb-1">
                                    <i data-lucide="${notification.icon || 'bell'}" class="w-4 h-4 ${notification.type === 'urgent' ? 'text-red-500' : notification.type === 'warning' ? 'text-yellow-500' : 'text-blue-500'}"></i>
                                    <h3 class="font-semibold text-slate-800">${notification.title}</h3>
                                </div>
                                <p class="text-slate-600 text-sm">${notification.message}</p>
                                <p class="text-slate-400 text-xs mt-2">${new Date(notification.timestamp).toLocaleString()}</p>
                            </div>
                            <button class="delete-notification text-slate-400 hover:text-red-500 ml-2" data-id="${notification.id}">
                                <i data-lucide="x" class="w-4 h-4"></i>
                            </button>
                        </div>
                    </div>
                `;
            };

            const addNotification = (title, message, type = 'info', icon = 'bell') => {
                const notification = {
                    id: Date.now().toString(),
                    title,
                    message,
                    type,
                    icon,
                    timestamp: new Date().toISOString(),
                    read: false
                };
                
                state.notifications.unshift(notification);
                localStorage.setItem('notifications', JSON.stringify(state.notifications));
                
                if (document.getElementById('notifications').classList.contains('active')) {
                    renderNotifications();
                }
                
                updateNotificationBadge();
            };

            const updateNotificationBadge = () => {
                const unreadCount = state.notifications.filter(n => !n.read).length;
                if (unreadCount > 0) {
                    ui.notificationBadge.textContent = unreadCount;
                    ui.notificationBadge.classList.remove('hidden');
                } else {
                    ui.notificationBadge.classList.add('hidden');
                }
            };

            // Automated Deadline Email Reminder System
            const checkPendingReminders = () => {
                if (!state.reminderSettings.enabled || !state.googleToken) return;

                const today = new Date();
                today.setHours(0, 0, 0, 0);
                let pendingCount = 0;
                let urgentTenders = [];

                state.tenders.forEach(tender => {
                    if (tender.status === 'completed' || isExpired(tender)) return;

                    const deadline = new Date(tender.lastDate + 'T00:00:00');
                    const diffTime = deadline - today;
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                    state.reminderSettings.reminders.forEach(reminder => {
                        const reminderDays = parseInt(reminder.type.split('_')[0]);
                        if (reminder.enabled && diffDays === reminderDays) {
                            if (!reminder.sent.includes(tender.id)) {
                                pendingCount++;
                                if (reminderDays <= 1) {
                                    urgentTenders.push(tender.tenderName);
                                }
                            }
                        }
                    });
                });

                ui.pendingRemindersCount.textContent = pendingCount;
                if (pendingCount > 0) {
                    ui.reminderStatus.classList.remove('hidden');
                } else {
                    ui.reminderStatus.classList.add('hidden');
                }

                if (urgentTenders.length > 0) {
                    ui.urgentAlertText.textContent = `${urgentTenders.length} tender(s) have urgent deadlines: ${urgentTenders.join(', ')}`;
                    ui.urgentDeadlineAlert.classList.remove('hidden');
                    
                    addNotification(
                        'Urgent Deadline Alert',
                        `${urgentTenders.length} tender(s) have urgent deadlines approaching.`,
                        'urgent',
                        'siren'
                    );
                } else {
                    ui.urgentDeadlineAlert.classList.add('hidden');
                }
            };

            const sendAutomatedReminders = async () => {
                if (!state.reminderSettings.enabled || !state.googleToken) return;

                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const sentReminders = [];

                for (const tender of state.tenders) {
                    if (tender.status === 'completed' || isExpired(tender)) continue;

                    const deadline = new Date(tender.lastDate + 'T00:00:00');
                    const diffTime = deadline - today;
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                    for (const reminder of state.reminderSettings.reminders) {
                        const reminderDays = parseInt(reminder.type.split('_')[0]);
                        if (reminder.enabled && diffDays === reminderDays && !reminder.sent.includes(tender.id)) {
                            try {
                                await sendReminderEmail(tender, reminderDays);
                                reminder.sent.push(tender.id);
                                sentReminders.push({
                                    tenderId: tender.id,
                                    tenderName: tender.tenderName,
                                    type: `${reminderDays} day${reminderDays !== 1 ? 's' : ''} before`,
                                    timestamp: new Date().toISOString(),
                                    status: 'sent'
                                });
                                
                                addNotification(
                                    'Reminder Sent',
                                    `Reminder sent for tender "${tender.tenderName}" (${reminderDays} day${reminderDays !== 1 ? 's' : ''} before deadline)`,
                                    'info',
                                    'mail'
                                );
                            } catch (error) {
                                sentReminders.push({
                                    tenderId: tender.id,
                                    tenderName: tender.tenderName,
                                    type: `${reminderDays} day${reminderDays !== 1 ? 's' : ''} before`,
                                    timestamp: new Date().toISOString(),
                                    status: 'failed',
                                    error: error.message
                                });
                                
                                addNotification(
                                    'Reminder Failed',
                                    `Failed to send reminder for tender "${tender.tenderName}"`,
                                    'warning',
                                    'alert-triangle'
                                );
                            }
                        }
                    }
                }

                if (sentReminders.length > 0) {
                    state.reminderSettings.emailLogs.unshift(...sentReminders);
                    if (state.reminderSettings.emailLogs.length > 50) {
                        state.reminderSettings.emailLogs = state.reminderSettings.emailLogs.slice(0, 50);
                    }
                    localStorage.setItem('reminderSettings', JSON.stringify(state.reminderSettings));
                    updateReminderUI();
                }
            };

            const sendReminderEmail = async (tender, daysBefore) => {
                const userEmail = await getUserEmail();
                if (!userEmail) throw new Error('Could not get user email');

                let subject = '';
                let body = '';

                if (daysBefore === 0) {
                    subject = `URGENT: Tender Deadline Today - ${tender.tenderName}`;
                } else {
                    subject = `Reminder: Tender Deadline in ${daysBefore} day${daysBefore !== 1 ? 's' : ''} - ${tender.tenderName}`;
                }

                if (state.reminderSettings.emailTemplate) {
                    body = state.reminderSettings.emailTemplate
                        .replace(/{{tenderName}}/g, tender.tenderName)
                        .replace(/{{department}}/g, tender.department)
                        .replace(/{{deadline}}/g, new Date(tender.lastDate).toLocaleDateString())
                        .replace(/{{tenderType}}/g, tender.tenderType);
                } else {
                    body = `Attention! Tender "${tender.tenderName}" ki last submission date ${new Date(tender.lastDate).toLocaleDateString()} hai.\n\nDepartment: ${tender.department}\nTender Type: ${tender.tenderType}\n\nPlease ensure all eligibility criteria and documentation are ready.`;
                }

                const emailMessage = [
                    `To: ${userEmail}`,
                    `Subject: ${subject}`,
                    'Content-Type: text/plain; charset=utf-8',
                    '',
                    body
                ].join('\n');

                const base64EncodedEmail = btoa(unescape(encodeURIComponent(emailMessage)))
                    .replace(/\+/g, '-')
                    .replace(/\//g, '_')
                    .replace(/=+$/, '');

                const response = await fetch('https://gmail.googleapis.com/gmail/v1/users/me/messages/send', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${state.googleToken.access_token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ raw: base64EncodedEmail })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error?.message || 'Failed to send email');
                }

                return response.json();
            };

            const getUserEmail = async () => {
                try {
                    const response = await fetch('https://www.googleapis.com/oauth2/v1/userinfo?alt=json', {
                        headers: {
                            'Authorization': `Bearer ${state.googleToken.access_token}`
                        }
                    });
                    if (response.ok) {
                        const userInfo = await response.json();
                        return userInfo.email;
                    }
                } catch (error) {
                    console.error('Error fetching user email:', error);
                }
                return null;
            };

            const updateReminderUI = () => {
                checkPendingReminders();
            };

            const toggleSidebar = () => {
                ui.sidebar.classList.toggle('-translate-x-full');
                ui.overlay.classList.toggle('hidden');
            };
            ui.menuBtn.addEventListener('click', toggleSidebar);
            ui.overlay.addEventListener('click', toggleSidebar);

            // Gmail API Integration
            const CLIENT_ID = '349472551775-dkvsq4tll22tlgv09l9ppdjo51iilltc.apps.googleusercontent.com';
            const SCOPE = 'https://www.googleapis.com/auth/gmail.send';
            let tokenClient;

            window.onload = () => {
                tokenClient = google.accounts.oauth2.initTokenClient({
                    client_id: CLIENT_ID,
                    scope: SCOPE,
                    callback: (tokenResponse) => {
                        tokenResponse.expiry = Date.now() + (parseInt(tokenResponse.expires_in) * 1000);
                        state.googleToken = tokenResponse;
                        localStorage.setItem('googleToken', JSON.stringify(tokenResponse));
                        updateGmailUi(true);
                        setTimeout(sendAutomatedReminders, 1000);
                    },
                });
                
                if (state.googleToken && state.googleToken.expiry > Date.now()) {
                    updateGmailUi(true);
                    setTimeout(sendAutomatedReminders, 1000);
                } else {
                    localStorage.removeItem('googleToken');
                    state.googleToken = null;
                    updateGmailUi(false);
                }

                setInterval(sendAutomatedReminders, 60 * 60 * 1000);
                
                if (state.notifications.length === 0) {
                    addNotification(
                        'Welcome to Tender Manager',
                        'You can now track all your tenders in one place. Add your first tender to get started.',
                        'info',
                        'info'
                    );
                }
            };

            function updateGmailUi(isConnected) {
                if(isConnected) {
                    ui.connectGmailBtn.classList.add('hidden');
                    ui.gmailStatus.classList.remove('hidden');
                    ui.gmailStatus.classList.add('flex');
                } else {
                    ui.connectGmailBtn.classList.remove('hidden');
                    ui.gmailStatus.classList.add('hidden');
                    ui.gmailStatus.classList.remove('flex');
                }
                updateReminderUI();
            }

            ui.connectGmailBtn.addEventListener('click', () => {
                if (tokenClient) {
                    tokenClient.requestAccessToken();
                }
            });

            ui.disconnectGmailBtn.addEventListener('click', () => {
                if(state.googleToken) {
                    google.accounts.oauth2.revoke(state.googleToken.access_token, () => {
                        state.googleToken = null;
                        localStorage.removeItem('googleToken');
                        updateGmailUi(false);
                    });
                }
            });

            const openModal = (modal) => {
                modal.classList.remove('hidden');
                modal.classList.add('flex');
                setTimeout(() => {
                    modal.classList.add('open');
                    modal.querySelector('.modal-content').classList.add('open');
                }, 10);
            };

            const closeModal = (modal) => {
                modal.classList.remove('open');
                modal.querySelector('.modal-content').classList.remove('open');
                setTimeout(() => {
                    modal.classList.add('hidden');
                    modal.classList.remove('flex');
                }, 300);
            };
            
            const saveState = () => {
                localStorage.setItem('tenders', JSON.stringify(state.tenders));
                localStorage.setItem('userProfile', JSON.stringify(state.userProfile));
                renderTenders();
                renderStats();
                updateReminderUI();
                
                const activePage = document.querySelector('.page.active').id;
                renderPageContent(activePage);
            };

            const isExpired = (tender) => {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const deadline = new Date(tender.lastDate + 'T00:00:00');
                return deadline < today;
            };

            const getDeadlineStatus = (tender) => {
                if (tender.status === 'completed') return { status: 'Completed', color: 'border-slate-400', text: 'Tender Completed' };
                if (isExpired(tender)) return { status: 'Expired', color: 'border-black', text: 'Tender Expired' };
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const deadline = new Date(tender.lastDate + 'T00:00:00');
                const diffTime = deadline - today;
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                if (diffDays <= 2) return { status: 'Urgent', color: 'border-red-500', text: `Deadline in ${diffDays} day(s)` };
                if (diffDays <= 7) return { status: 'Soon', color: 'border-yellow-500', text: `${diffDays} days remaining` };
                return { status: 'Safe', color: 'border-green-500', text: `${diffDays} days remaining` };
            };
            
            const createTenderCard = (tender, eligibility, deadline) => {
                const completedClass = tender.status === 'completed' ? 'completed-tender' : '';
                const urgentClass = deadline.status === 'Urgent' ? 'urgent-pulse' : '';
                
                let eligibilityIcon = '';
                if (eligibility.status === 'Eligible') {
                    eligibilityIcon = '<i data-lucide="check-circle" class="w-4 h-4 mr-1"></i>';
                } else if (eligibility.status === 'Partially Eligible') {
                    eligibilityIcon = '<i data-lucide="alert-circle" class="w-4 h-4 mr-1"></i>';
                } else {
                    eligibilityIcon = '<i data-lucide="x-circle" class="w-4 h-4 mr-1"></i>';
                }
                
                return `<div class="bg-white rounded-xl shadow-lg overflow-hidden border-l-4 transition-all hover:shadow-xl hover:-translate-y-1 ${deadline.color} ${completedClass} ${urgentClass}">
                    <div class="p-5">
                        <div class="flex justify-between items-start">
                            <div>
                                <p class="text-xs font-semibold uppercase tracking-wide text-gray-500">${tender.department}</p>
                                <h3 class="text-lg font-bold text-gray-900 mt-1">${tender.tenderName}</h3>
                                <span class="text-xs bg-slate-200 text-slate-800 px-2 py-0.5 rounded-full font-medium">${tender.tenderType}</span>
                            </div>
                            <div class="flex-shrink-0 flex gap-1">
                                <button class="view-btn text-gray-400 hover:text-green-600 p-1" title="View Details" data-id="${tender.id}">
                                    <i data-lucide="eye" class="w-5 h-5"></i>
                                </button>
                                <button class="edit-btn text-gray-400 hover:text-blue-600 p-1" title="Edit Tender" data-id="${tender.id}">
                                    <i data-lucide="file-pen-line" class="w-5 h-5"></i>
                                </button>
                                <button class="delete-btn text-gray-400 hover:text-red-600 p-1" title="Delete Tender" data-id="${tender.id}">
                                    <i data-lucide="trash-2" class="w-5 h-5"></i>
                                </button>
                            </div>
                        </div>
                        <div class="mt-4 space-y-2">
                            <div class="flex items-center justify-between text-sm text-gray-600">
                                <span><i data-lucide="calendar-clock" class="inline w-4 h-4 mr-1"></i>Deadline:</span>
                                <span class="font-semibold">${new Date(tender.lastDate + 'T00:00:00').toLocaleDateString()}</span>
                            </div>
                            <div class="flex items-center justify-between text-sm font-semibold p-2 rounded-lg ${eligibility.status === 'Eligible' ? 'bg-green-100 text-green-800' : eligibility.status === 'Partially Eligible' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}">
                                <span>${eligibilityIcon}Eligibility:</span>
                                <span class="font-bold">${eligibility.status}</span>
                            </div>
                        </div>
                    </div>
                    <div class="bg-gray-50 px-5 py-2">
                        <p class="text-sm font-medium text-center ${deadline.status === 'Urgent' || deadline.status === 'Expired' || deadline.status === 'Completed' ? 'text-slate-600' : deadline.status === 'Soon' ? 'text-yellow-700' : 'text-green-700'}">${deadline.text}</p>
                    </div>
                </div>`;
            };
            
            const renderStats = () => {
                const allTenders = state.tenders;
                const activeTenders = allTenders.filter(t => t.status === 'active' && !isExpired(t));
                const eligibleCount = activeTenders.filter(t => checkEligibility(t).status === 'Eligible').length;
                const urgentCount = activeTenders.filter(t => getDeadlineStatus(t).status === 'Urgent').length;
                const completedCount = allTenders.filter(t => t.status === 'completed').length;
                const statsHTML = `
                    <div class="bg-white p-4 rounded-xl shadow-md flex items-center gap-4 border border-slate-200"><div class="bg-blue-100 text-blue-600 p-3 rounded-full"><i data-lucide="briefcase" class="w-6 h-6"></i></div><div><p class="text-slate-500 text-sm font-medium">Active Tenders</p><p class="text-2xl font-bold">${activeTenders.length}</p></div></div>
                    <div class="bg-white p-4 rounded-xl shadow-md flex items-center gap-4 border border-slate-200"><div class="bg-green-100 text-green-600 p-3 rounded-full"><i data-lucide="check-badge" class="w-6 h-6"></i></div><div><p class="text-slate-500 text-sm font-medium">Eligible Tenders</p><p class="text-2xl font-bold">${eligibleCount}</p></div></div>
                    <div class="bg-white p-4 rounded-xl shadow-md flex items-center gap-4 border border-slate-200"><div class="bg-red-100 text-red-600 p-3 rounded-full"><i data-lucide="siren" class="w-6 h-6"></i></div><div><p class="text-slate-500 text-sm font-medium">Urgent Deadlines</p><p class="text-2xl font-bold">${urgentCount}</p></div></div>
                    <div class="bg-white p-4 rounded-xl shadow-md flex items-center gap-4 border border-slate-200"><div class="bg-slate-100 text-slate-600 p-3 rounded-full"><i data-lucide="archive" class="w-6 h-6"></i></div><div><p class="text-slate-500 text-sm font-medium">Completed</p><p class="text-2xl font-bold">${completedCount}</p></div></div>
                `;
                ui.statsContainer.innerHTML = statsHTML;
                lucide.createIcons();
            };

            const renderTenders = () => {
                ui.tenderList.innerHTML = '';
                const statusFilter = ui.filterStatus.value;
                const deptFilter = ui.filterDept.value.toLowerCase();
                const typeFilter = ui.filterType.value;
                const filteredTenders = state.tenders.filter(tender => {
                    const expired = isExpired(tender);
                    if (statusFilter === 'active' && (tender.status === 'completed' || expired)) return false;
                    if (statusFilter === 'completed' && tender.status !== 'completed') return false;
                    if (statusFilter === 'expired' && (!expired || tender.status === 'completed')) return false;
                    if (deptFilter && !tender.department.toLowerCase().includes(deptFilter)) return false;
                    if (typeFilter !== 'all' && tender.tenderType !== typeFilter) return false;
                    return true;
                });
                ui.noTenders.classList.toggle('hidden', filteredTenders.length > 0);
                filteredTenders.forEach(tender => {
                    const eligibility = checkEligibility(tender);
                    const deadline = getDeadlineStatus(tender);
                    const tenderCard = createTenderCard(tender, eligibility, deadline);
                    ui.tenderList.innerHTML += tenderCard;
                });
                lucide.createIcons();
                updateReminderUI();
            };

            const openDetailModal = (id) => {
                const tender = state.tenders.find(t => t.id === id);
                if (!tender) return;
                const eligibility = checkEligibility(tender);
                const detailHtml = `<p><strong>Tender Name/ID:</strong> ${tender.tenderName}</p><p><strong>Department:</strong> ${tender.department}</p><p><strong>Tender Type:</strong> ${tender.tenderType}</p><p><strong>Submission Date:</strong> ${new Date(tender.lastDate + 'T00:00:00').toLocaleDateString()}</p><div class="mt-2 p-3 rounded-lg ${eligibility.status === 'Eligible' ? 'bg-green-100' : eligibility.status === 'Partially Eligible' ? 'bg-yellow-100' : 'bg-red-100'}"><p><strong>Eligibility Status:</strong> <span class="font-bold">${eligibility.status}</span></p><p class="text-sm">${eligibility.reason}</p></div><div class="mt-2 border-t pt-2"><h4 class="font-semibold">Required Criteria</h4><p><strong>Experience:</strong> ${tender.criteria.experience || 'N/A'} years</p><p><strong>Turnover:</strong> ${tender.criteria.turnover || 'N/A'} Lakhs</p><p><strong>Certifications:</strong> ${tender.criteria.certifications.join(', ') || 'N/A'}</p></div><div class="mt-2 border-t pt-2"><p><strong>Notes:</strong></p><p class="text-gray-600 whitespace-pre-wrap">${tender.notes || 'No additional notes.'}</p></div>`;
                document.getElementById('detailContent').innerHTML = detailHtml;
                let actionsHtml = `<button id="downloadBtn" data-id="${tender.id}" class="bg-green-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-green-700 flex items-center gap-2"><i data-lucide="download" class="w-5 h-5"></i>Save as JSON</button>`;
                if (state.googleToken) {
                    actionsHtml += `<button id="sendEmailBtn" data-id="${tender.id}" class="bg-red-500 text-white font-semibold px-4 py-2 rounded-lg hover:bg-red-600 flex items-center gap-2"><i data-lucide="send" class="w-5 h-5"></i>Send Email</button>`;
                }
                if (tender.status !== 'completed' && !isExpired(tender)) {
                    actionsHtml += `<button id="completeBtn" data-id="${tender.id}" class="bg-indigo-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-indigo-700 flex items-center gap-2"><i data-lucide="check-circle" class="w-5 h-5"></i>Mark as Complete</button>`;
                }
                document.getElementById('detailActions').innerHTML = actionsHtml;
                lucide.createIcons();
                openModal(ui.detailModal);
            };

            const exportTendersToCSV = () => {
                if (state.tenders.length === 0) {
                    showCustomConfirm('No tenders to export.', () => {}); // Using confirm as a simple alert
                    return;
                }

                const sanitizeCSVValue = (value) => {
                    if (value === null || value === undefined) {
                        return '';
                    }
                    let strValue = String(value);
                    if (strValue.search(/("|,|\n)/g) >= 0) {
                        strValue = '"' + strValue.replace(/"/g, '""') + '"';
                    }
                    return strValue;
                };

                const headers = [
                    "Tender Name/ID", "Department", "Tender Type", "Submission Date", 
                    "Overall Status", "Eligibility Status", "Eligibility Reason", "Notes"
                ];

                const rows = state.tenders.map(tender => {
                    const eligibility = checkEligibility(tender);
                    const deadline = getDeadlineStatus(tender);
                    const rowData = [
                        tender.tenderName,
                        tender.department,
                        tender.tenderType,
                        tender.lastDate,
                        deadline.status,
                        eligibility.status,
                        eligibility.reason,
                        tender.notes
                    ];
                    return rowData.map(sanitizeCSVValue).join(',');
                });

                const csvContent = [headers.join(','), ...rows].join('\n');
                
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                if (link.download !== undefined) {
                    const today = new Date();
                    const dateStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
                    const filename = `TenderBackup_${dateStr}.csv`;
                    
                    const url = URL.createObjectURL(blob);
                    link.setAttribute('href', url);
                    link.setAttribute('download', filename);
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
            };

            // Event Listeners
            
            ui.navItems.forEach(item => {
                item.addEventListener('click', () => {
                    navigateToPage(item.dataset.page);
                });
            });

            ui.settingsBtn.addEventListener('click', () => {
                navigateToPage('settings');
            });

            ui.backupDataBtn.addEventListener('click', exportTendersToCSV);

            ui.clearNotificationsBtn.addEventListener('click', () => {
                state.notifications = [];
                localStorage.setItem('notifications', JSON.stringify(state.notifications));
                renderNotifications();
            });

            ui.notificationsList.addEventListener('click', (e) => {
                const deleteBtn = e.target.closest('.delete-notification');
                if (deleteBtn) {
                    const notificationId = deleteBtn.dataset.id;
                    state.notifications = state.notifications.filter(n => n.id !== notificationId);
                    localStorage.setItem('notifications', JSON.stringify(state.notifications));
                    renderNotifications();
                }
            });

            ui.dismissAlertBtn.addEventListener('click', () => {
                ui.urgentDeadlineAlert.classList.add('hidden');
            });

            const showCustomConfirm = (message, onConfirm) => {
                const confirmBox = document.createElement('div');
                confirmBox.className = 'fixed inset-0 bg-black/40 z-[100] flex items-center justify-center p-4';
                confirmBox.innerHTML = `<div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm"><p class="text-lg font-medium">${message}</p><div class="flex justify-end gap-3 mt-6"><button class="cancel-confirm bg-gray-200 text-gray-800 font-semibold px-4 py-2 rounded-lg hover:bg-gray-300">Cancel</button><button class="confirm-ok bg-red-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-red-700">Delete</button></div></div>`;
                document.body.appendChild(confirmBox);
                confirmBox.querySelector('.confirm-ok').onclick = () => { onConfirm(); document.body.removeChild(confirmBox); };
                confirmBox.querySelector('.cancel-confirm').onclick = () => { document.body.removeChild(confirmBox); };
            };

            document.getElementById('addTenderBtn').addEventListener('click', () => {
                document.getElementById('modalTitle').textContent = 'Add New Tender';
                ui.tenderForm.reset();
                document.getElementById('tenderId').value = '';
                openModal(ui.tenderModal);
            });

            document.getElementById('profileBtn').addEventListener('click', () => {
                initializeProfile();
                openModal(ui.profileModal);
            });
            
            document.querySelectorAll('.cancelBtn').forEach(btn => {
                btn.addEventListener('click', () => closeModal(btn.closest('.modal-backdrop')));
            });

            window.addEventListener('click', (e) => {
                if (e.target.classList.contains('modal-backdrop')) {
                    closeModal(e.target);
                }
            });
            
            ui.tenderForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const tenderId = document.getElementById('tenderId').value;
                const certifications = document.getElementById('reqCertifications').value.split(',').map(c => c.trim()).filter(Boolean);
                const tenderData = {
                    id: tenderId || Date.now().toString(),
                    tenderName: document.getElementById('tenderName').value,
                    department: document.getElementById('department').value,
                    tenderType: document.getElementById('tenderType').value,
                    lastDate: document.getElementById('lastDate').value,
                    notes: document.getElementById('tenderNotes').value,
                    criteria: {
                        experience: parseFloat(document.getElementById('reqExperience').value) || 0,
                        turnover: parseFloat(document.getElementById('reqTurnover').value) || 0,
                        certifications: certifications,
                        projects: parseInt(document.getElementById('reqProjects').value) || 0,
                        team: document.getElementById('reqTeam').value || '',
                        technical: document.getElementById('reqTechnical').value || ''
                    },
                    status: tenderId ? state.tenders.find(t => t.id === tenderId).status : 'active'
                };
                if (tenderId) {
                    const index = state.tenders.findIndex(t => t.id === tenderId);
                    state.tenders[index] = tenderData;
                    
                    addNotification(
                        'Tender Updated',
                        `Tender "${tenderData.tenderName}" has been updated.`,
                        'info',
                        'edit'
                    );
                } else {
                    state.tenders.unshift(tenderData);
                    
                    addNotification(
                        'New Tender Added',
                        `Tender "${tenderData.tenderName}" has been added to your list.`,
                        'info',
                        'plus-circle'
                    );
                }
                saveState();
                closeModal(ui.tenderModal);
            });

            ui.tenderList.addEventListener('click', (e) => {
                const editBtn = e.target.closest('.edit-btn');
                const deleteBtn = e.target.closest('.delete-btn');
                const viewBtn = e.target.closest('.view-btn');
                if (viewBtn) openDetailModal(viewBtn.dataset.id);
                if (editBtn) {
                    const tender = state.tenders.find(t => t.id === editBtn.dataset.id);
                    if(tender) {
                        document.getElementById('modalTitle').textContent = 'Edit Tender';
                        document.getElementById('tenderId').value = tender.id;
                        document.getElementById('tenderName').value = tender.tenderName;
                        document.getElementById('department').value = tender.department;
                        document.getElementById('tenderType').value = tender.tenderType;
                        document.getElementById('lastDate').value = tender.lastDate;
                        document.getElementById('tenderNotes').value = tender.notes;
                        document.getElementById('reqExperience').value = tender.criteria.experience;
                        document.getElementById('reqTurnover').value = tender.criteria.turnover;
                        document.getElementById('reqCertifications').value = tender.criteria.certifications.join(', ');
                        document.getElementById('reqProjects').value = tender.criteria.projects;
                        document.getElementById('reqTeam').value = tender.criteria.team;
                        document.getElementById('reqTechnical').value = tender.criteria.technical;
                        openModal(ui.tenderModal);
                    }
                }
                if (deleteBtn) {
                    const tenderId = deleteBtn.dataset.id;
                    const tender = state.tenders.find(t => t.id === tenderId);
                    showCustomConfirm('Are you sure you want to delete this tender?', () => {
                         state.tenders = state.tenders.filter(t => t.id !== tenderId);
                         saveState();
                         
                         addNotification(
                             'Tender Deleted',
                             `Tender "${tender.tenderName}" has been deleted.`,
                             'warning',
                             'trash-2'
                         );
                    });
                }
            });
            
            ui.notesList.addEventListener('click', (e) => {
                const viewBtn = e.target.closest('.view-btn');
                if (viewBtn) {
                    openDetailModal(viewBtn.dataset.id);
                    return;
                }
                
                const deleteBtn = e.target.closest('.delete-note-btn');
                if (deleteBtn) {
                    const tenderId = deleteBtn.dataset.id;
                    const tender = state.tenders.find(t => t.id === tenderId);
                    if (tender) {
                        showCustomConfirm(`Are you sure you want to delete the note for "${tender.tenderName}"?`, () => {
                            const index = state.tenders.findIndex(t => t.id === tenderId);
                            if (index !== -1) {
                                state.tenders[index].notes = '';
                                saveState();
                                
                                addNotification(
                                    'Note Deleted',
                                    `The note for tender "${tender.tenderName}" has been deleted.`,
                                    'warning',
                                    'trash-2'
                                );
                            }
                        });
                    }
                }
            });
            
            document.getElementById('detailActions').addEventListener('click', e => {
                const completeBtn = e.target.closest('#completeBtn');
                const downloadBtn = e.target.closest('#downloadBtn');
                const sendEmailBtn = e.target.closest('#sendEmailBtn');
                if(completeBtn) {
                    const tender = state.tenders.find(t => t.id === completeBtn.dataset.id);
                    if (tender) {
                        tender.status = 'completed';
                        saveState();
                        
                        addNotification(
                            'Tender Completed',
                            `Tender "${tender.tenderName}" has been marked as completed.`,
                            'info',
                            'check-circle'
                        );
                    }
                    closeModal(ui.detailModal);
                }
                if(downloadBtn) {
                    const tender = state.tenders.find(t => t.id === downloadBtn.dataset.id);
                    if(tender) {
                          const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(tender, null, 2));
                          const downloadAnchorNode = document.createElement('a');
                          downloadAnchorNode.setAttribute("href", dataStr);
                          downloadAnchorNode.setAttribute("download", `tender_${tender.tenderName.replace(/ /g, '_')}.json`);
                          document.body.appendChild(downloadAnchorNode);
                          downloadAnchorNode.click();
                          downloadAnchorNode.remove();
                    }
                }
                if (sendEmailBtn) {
                    const tender = state.tenders.find(t => t.id === sendEmailBtn.dataset.id);
                    const eligibility = checkEligibility(tender);
                    document.getElementById('emailForm').reset();
                    document.getElementById('emailSubject').value = `Details for Tender: ${tender.tenderName}`;
                    const emailBodyContent = `Hello,\n\nHere are the details for the tender "${tender.tenderName}":\n\n- Department: ${tender.department}\n- Submission Deadline: ${new Date(tender.lastDate + 'T00:00:00').toLocaleDateString()}\n- Eligibility Status: ${eligibility.status}\n- Reason: ${eligibility.reason}\n\nAdditional Notes:\n${tender.notes || 'N/A'}\n\n---\nSent from Tender Management Software`;
                    document.getElementById('emailBody').value = emailBodyContent;
                    document.getElementById('emailStatusMessage').textContent = '';
                    openModal(ui.emailModal);
                }
            });

             ui.emailForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                if(!state.googleToken) return;
                const to = document.getElementById('emailTo').value;
                const subject = document.getElementById('emailSubject').value;
                const body = document.getElementById('emailBody').value;
                const emailMessage = [`To: ${to}`, `Subject: ${subject}`, 'Content-Type: text/plain; charset=utf-8', '', body].join('\n');
                const base64EncodedEmail = btoa(unescape(encodeURIComponent(emailMessage))).replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
                const statusMsg = document.getElementById('emailStatusMessage');
                const spinner = document.getElementById('sendEmailSpinner');
                const btnText = document.getElementById('sendEmailText');
                spinner.classList.remove('hidden');
                btnText.classList.add('hidden');
                statusMsg.textContent = 'Sending...';
                statusMsg.className = 'text-sm text-center text-blue-600';
                try {
                    const response = await fetch('https://gmail.googleapis.com/gmail/v1/users/me/messages/send', { method: 'POST', headers: { 'Authorization': `Bearer ${state.googleToken.access_token}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ raw: base64EncodedEmail }) });
                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.error.message || 'Failed to send email.');
                    }
                    statusMsg.textContent = 'Email sent successfully!';
                    statusMsg.className = 'text-sm text-center text-green-600';
                    
                    addNotification(
                        'Email Sent',
                        `Tender details for "${subject.split(': ')[1]}" have been sent successfully.`,
                        'info',
                        'send'
                    );
                    
                    setTimeout(() => closeModal(ui.emailModal), 2000);
                } catch (error) {
                    statusMsg.textContent = `Error: ${error.message}`;
                    statusMsg.className = 'text-sm text-center text-red-600';
                } finally {
                    spinner.classList.add('hidden');
                    btnText.classList.remove('hidden');
                }
            });

            [ui.filterStatus, ui.filterDept, ui.filterType].forEach(el => {
                el.addEventListener('input', renderTenders);
            });

            ui.clearFiltersBtn.addEventListener('click', () => {
                ui.filterStatus.value = 'active';
                ui.filterDept.value = '';
                ui.filterType.value = 'all';
                renderTenders();
            });

            // Initial Render
            renderStats();
            renderTenders();
            updateReminderUI();
            updateNotificationBadge();
            initializeProfile();
            
            // Initialize new pages
            renderCalendar();
            renderCompetitors();
        });
    </script>
</body>
</html>